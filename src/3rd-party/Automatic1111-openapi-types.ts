/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["get_current_user_user__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["get_current_user_user_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login_check/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Login Check */
        get: operations["login_check_login_check__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login_check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Login Check */
        get: operations["login_check_login_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Token */
        get: operations["get_token_token__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Token */
        get: operations["get_token_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app_id/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** App Id */
        get: operations["app_id_app_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** App Id */
        get: operations["app_id_app_id_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dev/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Notify Changes */
        get: operations["notify_changes_dev_reload_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_login__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout */
        get: operations["logout_logout_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Main */
        get: operations["main__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /** Main */
        head: operations["main__head"];
        patch?: never;
        trace?: never;
    };
    "/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Info */
        get: operations["api_info_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Info */
        get: operations["api_info_info__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Config */
        get: operations["get_config_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Config */
        get: operations["get_config_config__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/static/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Static Resource */
        get: operations["static_resource_static__path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_component/{id}/{type}/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Custom Component Path */
        get: operations["custom_component_path_custom_component__id___type___file_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Build Resource */
        get: operations["build_resource_assets__path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favicon.ico": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Favicon */
        get: operations["favicon_favicon_ico_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proxy={url_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Reverse Proxy */
        get: operations["reverse_proxy_proxy__url_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /** Reverse Proxy */
        head: operations["reverse_proxy_proxy__url_path__head"];
        patch?: never;
        trace?: never;
    };
    "/file={path_or_url}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** File */
        get: operations["file_file__path_or_url__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /** File */
        head: operations["file_file__path_or_url__head"];
        patch?: never;
        trace?: never;
    };
    "/stream/{session_hash}/{run}/{component_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream */
        get: operations["stream_stream__session_hash___run___component_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** File Deprecated */
        get: operations["file_deprecated_file__path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Iterator */
        post: operations["reset_iterator_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Iterator */
        post: operations["reset_iterator_reset__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/heartbeat/{session_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Heartbeat
         * @description Clients make a persistent connection to this endpoint to keep the session alive.
         *     When the client disconnects, the session state is deleted.
         */
        get: operations["heartbeat_heartbeat__session_hash__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{api_name}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Predict */
        post: operations["predict_api__api_name___post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/{api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Predict */
        post: operations["predict_api__api_name__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/run/{api_name}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Predict */
        post: operations["predict_run__api_name___post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/run/{api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Predict */
        post: operations["predict_run__api_name__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/call/{api_name}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Simple Predict Post */
        post: operations["simple_predict_post_call__api_name___post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/call/{api_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Simple Predict Post */
        post: operations["simple_predict_post_call__api_name__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Queue Join */
        post: operations["queue_join_queue_join_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Event */
        post: operations["cancel_event_cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/call/{api_name}/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Simple Predict Get */
        get: operations["simple_predict_get_call__api_name___event_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Queue Data */
        get: operations["queue_data_queue_data_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component_server/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Component Server */
        post: operations["component_server_component_server__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component_server": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Component Server */
        post: operations["component_server_component_server_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Queue Status */
        get: operations["get_queue_status_queue_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload_progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Upload Progress */
        get: operations["get_upload_progress_upload_progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["upload_file_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/startup-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Startup Events */
        get: operations["startup_events_startup_events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/theme.css": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Theme Css */
        get: operations["theme_css_theme_css_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots.txt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Robots Txt */
        get: operations["robots_txt_robots_txt_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitoring": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Analytics Login */
        get: operations["analytics_login_monitoring_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitoring/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Analytics Dashboard */
        get: operations["analytics_dashboard_monitoring__key__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/pending-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Pending Tasks */
        get: operations["get_pending_tasks_internal_pending_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Progressapi */
        post: operations["progressapi_internal_progress_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/quicksettings-hint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Quicksettings Hint */
        get: operations["quicksettings_hint_internal_quicksettings_hint_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** <Lambda> */
        get: operations["_lambda__internal_ping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/profile-startup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** <Lambda> */
        get: operations["_lambda__internal_profile_startup_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/sysinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download Sysinfo */
        get: operations["download_sysinfo_internal_sysinfo_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/sysinfo-download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** <Lambda> */
        get: operations["_lambda__internal_sysinfo_download_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/txt2img": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text2Imgapi */
        post: operations["text2imgapi_sdapi_v1_txt2img_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/img2img": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Img2Imgapi */
        post: operations["img2imgapi_sdapi_v1_img2img_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/extra-single-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Extras Single Image Api */
        post: operations["extras_single_image_api_sdapi_v1_extra_single_image_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/extra-batch-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Extras Batch Images Api */
        post: operations["extras_batch_images_api_sdapi_v1_extra_batch_images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/png-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pnginfoapi */
        post: operations["pnginfoapi_sdapi_v1_png_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Progressapi */
        get: operations["progressapi_sdapi_v1_progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/interrogate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Interrogateapi */
        post: operations["interrogateapi_sdapi_v1_interrogate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/interrupt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Interruptapi */
        post: operations["interruptapi_sdapi_v1_interrupt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/skip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Skip */
        post: operations["skip_sdapi_v1_skip_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Config */
        get: operations["get_config_sdapi_v1_options_get"];
        put?: never;
        /** Set Config */
        post: operations["set_config_sdapi_v1_options_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/cmd-flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Cmd Flags */
        get: operations["get_cmd_flags_sdapi_v1_cmd_flags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/samplers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Samplers */
        get: operations["get_samplers_sdapi_v1_samplers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/schedulers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Schedulers */
        get: operations["get_schedulers_sdapi_v1_schedulers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/upscalers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Upscalers */
        get: operations["get_upscalers_sdapi_v1_upscalers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/latent-upscale-modes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Latent Upscale Modes */
        get: operations["get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/sd-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sd Models */
        get: operations["get_sd_models_sdapi_v1_sd_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/sd-modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sd Vaes And Text Encoders */
        get: operations["get_sd_vaes_and_text_encoders_sdapi_v1_sd_modules_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/hypernetworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Hypernetworks */
        get: operations["get_hypernetworks_sdapi_v1_hypernetworks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/face-restorers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Face Restorers */
        get: operations["get_face_restorers_sdapi_v1_face_restorers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/realesrgan-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Realesrgan Models */
        get: operations["get_realesrgan_models_sdapi_v1_realesrgan_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/prompt-styles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Prompt Styles */
        get: operations["get_prompt_styles_sdapi_v1_prompt_styles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Embeddings */
        get: operations["get_embeddings_sdapi_v1_embeddings_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/refresh-embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Embeddings */
        post: operations["refresh_embeddings_sdapi_v1_refresh_embeddings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/refresh-checkpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Checkpoints */
        post: operations["refresh_checkpoints_sdapi_v1_refresh_checkpoints_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/refresh-vae": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Vae */
        post: operations["refresh_vae_sdapi_v1_refresh_vae_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/create/embedding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Embedding */
        post: operations["create_embedding_sdapi_v1_create_embedding_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/create/hypernetwork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Hypernetwork */
        post: operations["create_hypernetwork_sdapi_v1_create_hypernetwork_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/memory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Memory */
        get: operations["get_memory_sdapi_v1_memory_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/unload-checkpoint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unloadapi */
        post: operations["unloadapi_sdapi_v1_unload_checkpoint_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/reload-checkpoint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reloadapi */
        post: operations["reloadapi_sdapi_v1_reload_checkpoint_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/scripts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Scripts List */
        get: operations["get_scripts_list_sdapi_v1_scripts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/script-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Script Info */
        get: operations["get_script_info_sdapi_v1_script_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/extensions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Extensions List */
        get: operations["get_extensions_list_sdapi_v1_extensions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sd_extra_networks/thumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch File */
        get: operations["fetch_file_sd_extra_networks_thumb_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sd_extra_networks/cover-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Cover Images */
        get: operations["fetch_cover_images_sd_extra_networks_cover_images_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sd_extra_networks/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Metadata */
        get: operations["get_metadata_sd_extra_networks_metadata_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sd_extra_networks/get-single-card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Single Card */
        get: operations["get_single_card_sd_extra_networks_get_single_card_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/controlnet/model_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Model List */
        get: operations["model_list_controlnet_model_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/controlnet/module_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Module List */
        get: operations["module_list_controlnet_module_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/controlnet/control_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Control Types */
        get: operations["control_types_controlnet_control_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/controlnet/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detect */
        post: operations["detect_controlnet_detect_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/loras": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Loras */
        get: operations["get_loras_sdapi_v1_loras_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sdapi/v1/refresh-loras": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Loras */
        post: operations["refresh_loras_sdapi_v1_refresh_loras_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/hello": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Greeting */
        get: operations["greeting_infinite_image_browsing_hello_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/global_setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Global Setting */
        get: operations["global_setting_infinite_image_browsing_global_setting_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/app_fe_setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** App Fe Setting */
        post: operations["app_fe_setting_infinite_image_browsing_app_fe_setting_post"];
        /** Remove App Fe Setting */
        delete: operations["remove_app_fe_setting_infinite_image_browsing_app_fe_setting_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Version */
        get: operations["get_version_infinite_image_browsing_version_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/delete_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Files */
        post: operations["delete_files_infinite_image_browsing_delete_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/mkdirs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Folders */
        post: operations["create_folders_infinite_image_browsing_mkdirs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/copy_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy Files */
        post: operations["copy_files_infinite_image_browsing_copy_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/move_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move Files */
        post: operations["move_files_infinite_image_browsing_move_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Target Folder Files */
        get: operations["get_target_folder_files_infinite_image_browsing_files_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/batch_get_files_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch Get Files Info */
        post: operations["batch_get_files_info_infinite_image_browsing_batch_get_files_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/image-thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Thumbnail */
        get: operations["thumbnail_infinite_image_browsing_image_thumbnail_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get File */
        get: operations["get_file_infinite_image_browsing_file_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/stream_video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream Video */
        get: operations["stream_video_infinite_image_browsing_stream_video_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/video_cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Video Cover */
        get: operations["video_cover_infinite_image_browsing_video_cover_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/set_target_frame_as_video_cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Target Frame As Video Cover */
        post: operations["set_target_frame_as_video_cover_infinite_image_browsing_set_target_frame_as_video_cover_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/send_img_path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Api Set Send Img Path */
        post: operations["api_set_send_img_path_infinite_image_browsing_send_img_path_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/gen_info_completed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Set Send Img Path */
        get: operations["api_set_send_img_path_infinite_image_browsing_gen_info_completed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/image_geninfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Image Geninfo */
        get: operations["image_geninfo_infinite_image_browsing_image_geninfo_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/image_geninfo_batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Image Geninfo Batch */
        post: operations["image_geninfo_batch_infinite_image_browsing_image_geninfo_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/check_path_exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Path Exists */
        post: operations["check_path_exists_infinite_image_browsing_check_path_exists_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Index Bd */
        get: operations["index_bd_infinite_image_browsing_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/fe-static/{file_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve Static File */
        get: operations["serve_static_file_infinite_image_browsing_fe_static__file_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/open_folder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Open Folder Using Explore */
        post: operations["open_folder_using_explore_infinite_image_browsing_open_folder_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/shutdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Shutdown App */
        post: operations["shutdown_app_infinite_image_browsing_shutdown_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/zip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Zip Files */
        post: operations["zip_files_infinite_image_browsing_zip_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/open_with_default_app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Open Target File Withdefault App */
        post: operations["open_target_file_withDefault_app_infinite_image_browsing_open_with_default_app_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/batch_top_4_media_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch Get Top 4 Media Cover Info */
        post: operations["batch_get_top_4_media_cover_info_infinite_image_browsing_batch_top_4_media_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/basic_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Db Basic Info */
        get: operations["get_db_basic_info_infinite_image_browsing_db_basic_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/random_images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Random Image */
        get: operations["random_image_infinite_image_browsing_db_random_images_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/expired_dirs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Db Expired */
        get: operations["get_db_expired_infinite_image_browsing_db_expired_dirs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/update_image_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Image Db Data */
        post: operations["update_image_db_data_infinite_image_browsing_db_update_image_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/search_by_substr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search By Substr */
        post: operations["search_by_substr_infinite_image_browsing_db_search_by_substr_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/match_images_by_tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Match Image By Tags */
        post: operations["match_image_by_tags_infinite_image_browsing_db_match_images_by_tags_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/img_selected_custom_tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Img Selected Custom Tag */
        get: operations["get_img_selected_custom_tag_infinite_image_browsing_db_img_selected_custom_tag_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/get_image_tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Img Tags */
        post: operations["get_img_tags_infinite_image_browsing_db_get_image_tags_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/update_tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Tag */
        post: operations["update_tag_infinite_image_browsing_db_update_tag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/toggle_custom_tag_to_img": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle Custom Tag To Img */
        post: operations["toggle_custom_tag_to_img_infinite_image_browsing_db_toggle_custom_tag_to_img_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/batch_update_image_tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch Update Image Tag */
        post: operations["batch_update_image_tag_infinite_image_browsing_db_batch_update_image_tag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/add_custom_tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Custom Tag */
        post: operations["add_custom_tag_infinite_image_browsing_db_add_custom_tag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/rename": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rename File */
        post: operations["rename_file_infinite_image_browsing_db_rename_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/remove_custom_tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove Custom Tag */
        post: operations["remove_custom_tag_infinite_image_browsing_db_remove_custom_tag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/remove_custom_tag_from_img": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove Custom Tag From Img */
        post: operations["remove_custom_tag_from_img_infinite_image_browsing_db_remove_custom_tag_from_img_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/extra_paths": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Extra Paths */
        get: operations["read_extra_paths_infinite_image_browsing_db_extra_paths_get"];
        put?: never;
        /** Create Extra Path */
        post: operations["create_extra_path_infinite_image_browsing_db_extra_paths_post"];
        /** Delete Extra Path */
        delete: operations["delete_extra_path_infinite_image_browsing_db_extra_paths_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/alias_extra_path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Alias Extra Path */
        post: operations["alias_extra_path_infinite_image_browsing_db_alias_extra_path_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/infinite_image_browsing/db/rebuild_index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rebuild Index */
        post: operations["rebuild_index_infinite_image_browsing_db_rebuild_index_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AddCustomTagReq */
        AddCustomTagReq: {
            /** Tag Name */
            tag_name: string;
        };
        /** AppFeSettingDelReq */
        AppFeSettingDelReq: {
            /** Name */
            name: string;
        };
        /** AppFeSettingReq */
        AppFeSettingReq: {
            /** Name */
            name: string;
            /** Value */
            value: string;
        };
        /** BatchUpdateImageReq */
        BatchUpdateImageReq: {
            /** Img Paths */
            img_paths: string[];
            /** Action */
            action: string;
            /** Tag Id */
            tag_id: number;
        };
        /** Body_detect_controlnet_detect_post */
        Body_detect_controlnet_detect_post: {
            /**
             * Controlnet Module
             * @default none
             */
            controlnet_module: string;
            /**
             * Controlnet Input Images
             * @default []
             */
            controlnet_input_images: string[];
            /**
             * Controlnet Processor Resolution
             * @default 512
             */
            controlnet_processor_res: number;
            /**
             * Controlnet Threshold a
             * @default 64
             */
            controlnet_threshold_a: number;
            /**
             * Controlnet Threshold b
             * @default 64
             */
            controlnet_threshold_b: number;
        };
        /** Body_login_login__post */
        Body_login_login__post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** Body_login_login_post */
        Body_login_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** CancelBody */
        CancelBody: {
            /** Session Hash */
            session_hash: string;
            /** Fn Index */
            fn_index: number;
            /** Event Id */
            event_id: string;
        };
        /** CheckPathExistsReq */
        CheckPathExistsReq: {
            /** Paths */
            paths: string[];
        };
        /** CreateFoldersReq */
        CreateFoldersReq: {
            /** Dest Folder */
            dest_folder: string;
        };
        /** CreateResponse */
        CreateResponse: {
            /**
             * Create info
             * @description Response string from create embedding or hypernetwork task.
             */
            info: string;
        };
        /** DeleteFilesReq */
        DeleteFilesReq: {
            /** File Paths */
            file_paths: string[];
        };
        /** EmbeddingItem */
        EmbeddingItem: {
            /**
             * Step
             * @description The number of steps that were used to train this embedding, if available
             */
            step: number | null;
            /**
             * SD Checkpoint
             * @description The hash of the checkpoint this embedding was trained on, if available
             */
            sd_checkpoint: string | null;
            /**
             * SD Checkpoint Name
             * @description The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use `sd_checkpoint` instead
             */
            sd_checkpoint_name: string | null;
            /**
             * Shape
             * @description The length of each individual vector in the embedding
             */
            shape: number;
            /**
             * Vectors
             * @description The number of vectors in the embedding
             */
            vectors: number;
        };
        /** EmbeddingsResponse */
        EmbeddingsResponse: {
            /**
             * Loaded
             * @description Embeddings loaded for the current model
             */
            loaded: {
                [key: string]: components["schemas"]["EmbeddingItem"];
            };
            /**
             * Skipped
             * @description Embeddings skipped for the current model (likely due to architecture incompatibility)
             */
            skipped: {
                [key: string]: components["schemas"]["EmbeddingItem"];
            };
        };
        /** EstimationMessage */
        EstimationMessage: {
            /**
             * Msg
             * @default estimation
             * @constant
             * @enum {string}
             */
            msg: "estimation";
            /** Event Id */
            event_id?: string | null;
            /** Rank */
            rank?: number | null;
            /** Queue Size */
            queue_size: number;
            /** Rank Eta */
            rank_eta?: number | null;
        };
        /** ExtensionItem */
        ExtensionItem: {
            /**
             * Name
             * @description Extension name
             */
            name: string;
            /**
             * Remote
             * @description Extension Repository URL
             */
            remote: string;
            /**
             * Branch
             * @description Extension Repository Branch
             */
            branch: string;
            /**
             * Commit Hash
             * @description Extension Repository Commit Hash
             */
            commit_hash: string;
            /**
             * Version
             * @description Extension Version
             */
            version: string;
            /**
             * Commit Date
             * @description Extension Repository Commit Date
             */
            commit_date: number;
            /**
             * Enabled
             * @description Flag specifying whether this extension is enabled
             */
            enabled: boolean;
        };
        /** ExtraPathAliasModel */
        ExtraPathAliasModel: {
            /** Path */
            path: string;
            /** Alias */
            alias: string;
        };
        /** ExtraPathModel */
        ExtraPathModel: {
            /** Path */
            path: string;
            /** Types */
            types: string[];
        };
        /** ExtrasBatchImagesRequest */
        ExtrasBatchImagesRequest: {
            /**
             * Resize Mode
             * @description Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
             * @default 0
             * @enum {integer}
             */
            resize_mode: 0 | 1;
            /**
             * Show results
             * @description Should the backend return the generated image?
             * @default true
             */
            show_extras_results: boolean;
            /**
             * GFPGAN Visibility
             * @description Sets the visibility of GFPGAN, values should be between 0 and 1.
             * @default 0
             */
            gfpgan_visibility: number;
            /**
             * CodeFormer Visibility
             * @description Sets the visibility of CodeFormer, values should be between 0 and 1.
             * @default 0
             */
            codeformer_visibility: number;
            /**
             * CodeFormer Weight
             * @description Sets the weight of CodeFormer, values should be between 0 and 1.
             * @default 0
             */
            codeformer_weight: number;
            /**
             * Upscaling Factor
             * @description By how much to upscale the image, only used when resize_mode=0.
             * @default 2
             */
            upscaling_resize: number;
            /**
             * Target Width
             * @description Target width for the upscaler to hit. Only used when resize_mode=1.
             * @default 512
             */
            upscaling_resize_w: number;
            /**
             * Target Height
             * @description Target height for the upscaler to hit. Only used when resize_mode=1.
             * @default 512
             */
            upscaling_resize_h: number;
            /**
             * Crop to fit
             * @description Should the upscaler crop the image to fit in the chosen size?
             * @default true
             */
            upscaling_crop: boolean;
            /**
             * Main upscaler
             * @description The name of the main upscaler to use, it has to be one of this list:
             * @default None
             */
            upscaler_1: string;
            /**
             * Secondary upscaler
             * @description The name of the secondary upscaler to use, it has to be one of this list:
             * @default None
             */
            upscaler_2: string;
            /**
             * Secondary upscaler visibility
             * @description Sets the visibility of secondary upscaler, values should be between 0 and 1.
             * @default 0
             */
            extras_upscaler_2_visibility: number;
            /**
             * Upscale first
             * @description Should the upscaler run before restoring faces?
             * @default false
             */
            upscale_first: boolean;
            /**
             * Images
             * @description List of images to work on. Must be Base64 strings
             */
            imageList: components["schemas"]["FileData"][];
        };
        /** ExtrasBatchImagesResponse */
        ExtrasBatchImagesResponse: {
            /**
             * HTML info
             * @description A series of HTML tags containing the process info.
             */
            html_info: string;
            /**
             * Images
             * @description The generated images in base64 format.
             */
            images: string[];
        };
        /** ExtrasSingleImageRequest */
        ExtrasSingleImageRequest: {
            /**
             * Resize Mode
             * @description Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
             * @default 0
             * @enum {integer}
             */
            resize_mode: 0 | 1;
            /**
             * Show results
             * @description Should the backend return the generated image?
             * @default true
             */
            show_extras_results: boolean;
            /**
             * GFPGAN Visibility
             * @description Sets the visibility of GFPGAN, values should be between 0 and 1.
             * @default 0
             */
            gfpgan_visibility: number;
            /**
             * CodeFormer Visibility
             * @description Sets the visibility of CodeFormer, values should be between 0 and 1.
             * @default 0
             */
            codeformer_visibility: number;
            /**
             * CodeFormer Weight
             * @description Sets the weight of CodeFormer, values should be between 0 and 1.
             * @default 0
             */
            codeformer_weight: number;
            /**
             * Upscaling Factor
             * @description By how much to upscale the image, only used when resize_mode=0.
             * @default 2
             */
            upscaling_resize: number;
            /**
             * Target Width
             * @description Target width for the upscaler to hit. Only used when resize_mode=1.
             * @default 512
             */
            upscaling_resize_w: number;
            /**
             * Target Height
             * @description Target height for the upscaler to hit. Only used when resize_mode=1.
             * @default 512
             */
            upscaling_resize_h: number;
            /**
             * Crop to fit
             * @description Should the upscaler crop the image to fit in the chosen size?
             * @default true
             */
            upscaling_crop: boolean;
            /**
             * Main upscaler
             * @description The name of the main upscaler to use, it has to be one of this list:
             * @default None
             */
            upscaler_1: string;
            /**
             * Secondary upscaler
             * @description The name of the secondary upscaler to use, it has to be one of this list:
             * @default None
             */
            upscaler_2: string;
            /**
             * Secondary upscaler visibility
             * @description Sets the visibility of secondary upscaler, values should be between 0 and 1.
             * @default 0
             */
            extras_upscaler_2_visibility: number;
            /**
             * Upscale first
             * @description Should the upscaler run before restoring faces?
             * @default false
             */
            upscale_first: boolean;
            /**
             * Image
             * @description Image to work on, must be a Base64 string containing the image's data.
             * @default
             */
            image: string;
        };
        /** ExtrasSingleImageResponse */
        ExtrasSingleImageResponse: {
            /**
             * HTML info
             * @description A series of HTML tags containing the process info.
             */
            html_info: string;
            /**
             * Image
             * @description The generated image in base64 format.
             */
            image?: string | null;
        };
        /** FaceRestorerItem */
        FaceRestorerItem: {
            /** Name */
            name: string;
            /** Path */
            cmd_dir: string | null;
        };
        /** FileData */
        FileData: {
            /**
             * File data
             * @description Base64 representation of the file
             */
            data: string;
            /** File name */
            name: string;
        };
        /** Flags */
        Flags: {
            /** Gpu Device Id */
            gpu_device_id?: string | null;
            /**
             * All In Fp32
             * @default false
             */
            all_in_fp32: boolean;
            /**
             * All In Fp16
             * @default false
             */
            all_in_fp16: boolean;
            /**
             * Unet In Bf16
             * @default false
             */
            unet_in_bf16: boolean;
            /**
             * Unet In Fp16
             * @default false
             */
            unet_in_fp16: boolean;
            /**
             * Unet In Fp8 E4M3Fn
             * @default false
             */
            unet_in_fp8_e4m3fn: boolean;
            /**
             * Unet In Fp8 E5M2
             * @default false
             */
            unet_in_fp8_e5m2: boolean;
            /**
             * Vae In Fp16
             * @default false
             */
            vae_in_fp16: boolean;
            /**
             * Vae In Fp32
             * @default false
             */
            vae_in_fp32: boolean;
            /**
             * Vae In Bf16
             * @default false
             */
            vae_in_bf16: boolean;
            /**
             * Vae In Cpu
             * @default false
             */
            vae_in_cpu: boolean;
            /**
             * Clip In Fp8 E4M3Fn
             * @default false
             */
            clip_in_fp8_e4m3fn: boolean;
            /**
             * Clip In Fp8 E5M2
             * @default false
             */
            clip_in_fp8_e5m2: boolean;
            /**
             * Clip In Fp16
             * @default false
             */
            clip_in_fp16: boolean;
            /**
             * Clip In Fp32
             * @default false
             */
            clip_in_fp32: boolean;
            /**
             * Attention Split
             * @default false
             */
            attention_split: boolean;
            /**
             * Attention Quad
             * @default false
             */
            attention_quad: boolean;
            /**
             * Attention Pytorch
             * @default false
             */
            attention_pytorch: boolean;
            /**
             * Force Upcast Attention
             * @default false
             */
            force_upcast_attention: boolean;
            /**
             * Disable Attention Upcast
             * @default false
             */
            disable_attention_upcast: boolean;
            /**
             * Disable Xformers
             * @default false
             */
            disable_xformers: boolean;
            /** Directml */
            directml?: string | null;
            /**
             * Disable Ipex Hijack
             * @default false
             */
            disable_ipex_hijack: boolean;
            /**
             * Always Gpu
             * @default false
             */
            always_gpu: boolean;
            /**
             * Always High Vram
             * @default false
             */
            always_high_vram: boolean;
            /**
             * Always Normal Vram
             * @default false
             */
            always_normal_vram: boolean;
            /**
             * Always Low Vram
             * @default false
             */
            always_low_vram: boolean;
            /**
             * Always No Vram
             * @default false
             */
            always_no_vram: boolean;
            /**
             * Always Cpu
             * @default false
             */
            always_cpu: boolean;
            /**
             * Always Offload From Vram
             * @default false
             */
            always_offload_from_vram: boolean;
            /**
             * Pytorch Deterministic
             * @default false
             */
            pytorch_deterministic: boolean;
            /**
             * Cuda Malloc
             * @default false
             */
            cuda_malloc: boolean;
            /**
             * Cuda Stream
             * @default false
             */
            cuda_stream: boolean;
            /**
             * Pin Shared Memory
             * @default false
             */
            pin_shared_memory: boolean;
            /**
             * Disable Gpu Warning
             * @default false
             */
            disable_gpu_warning: boolean;
            /**
             * F
             * @description ==SUPPRESS==
             * @default false
             */
            f: boolean;
            /**
             * Update All Extensions
             * @description launch.py argument: download updates for all extensions when starting the program
             * @default false
             */
            update_all_extensions: boolean;
            /**
             * Skip Python Version Check
             * @description launch.py argument: do not check python version
             * @default false
             */
            skip_python_version_check: boolean;
            /**
             * Skip Torch Cuda Test
             * @description launch.py argument: do not check if CUDA is able to work properly
             * @default false
             */
            skip_torch_cuda_test: boolean;
            /**
             * Reinstall Xformers
             * @description launch.py argument: install the appropriate version of xformers even if you have some version already installed
             * @default false
             */
            reinstall_xformers: boolean;
            /**
             * Reinstall Torch
             * @description launch.py argument: install the appropriate version of torch even if you have some version already installed
             * @default false
             */
            reinstall_torch: boolean;
            /**
             * Update Check
             * @description launch.py argument: check for updates at startup
             * @default false
             */
            update_check: boolean;
            /**
             * Test Server
             * @description launch.py argument: configure server for testing
             * @default false
             */
            test_server: boolean;
            /**
             * Log Startup
             * @description launch.py argument: print a detailed log of what's happening at startup
             * @default false
             */
            log_startup: boolean;
            /**
             * Skip Prepare Environment
             * @description launch.py argument: skip all environment preparation
             * @default false
             */
            skip_prepare_environment: boolean;
            /**
             * Skip Google Blockly
             * @description launch.py argument: do not initialize google blockly modules
             * @default false
             */
            skip_google_blockly: boolean;
            /**
             * Skip Install
             * @description launch.py argument: skip installation of packages
             * @default false
             */
            skip_install: boolean;
            /**
             * Dump Sysinfo
             * @description launch.py argument: dump limited sysinfo file (without information about extensions, options) to disk and quit
             * @default false
             */
            dump_sysinfo: boolean;
            /**
             * Loglevel
             * @description log level; one of: CRITICAL, ERROR, WARNING, INFO, DEBUG
             */
            loglevel?: string | null;
            /**
             * Do Not Download Clip
             * @description do not download CLIP model even if it's not included in the checkpoint
             * @default false
             */
            do_not_download_clip: boolean;
            /**
             * Data Dir
             * @description base path where all user data is stored
             * @default /app/sd-webui
             */
            data_dir: string;
            /**
             * Models Dir
             * @description base path where models are stored; overrides --data-dir
             */
            models_dir?: string | null;
            /**
             * Config
             * @description path to config which constructs model
             * @default /app/sd-webui/configs/v1-inference.yaml
             */
            config: string;
            /**
             * Ckpt
             * @description path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded
             * @default /app/sd-webui/model.ckpt
             */
            ckpt: string;
            /**
             * Ckpt Dir
             * @description Path to directory with stable diffusion checkpoints
             */
            ckpt_dir?: string | null;
            /**
             * Vae Dir
             * @description Path to directory with VAE files
             */
            vae_dir?: string | null;
            /**
             * Text Encoder Dir
             * @description Path to directory with text encoder models
             */
            text_encoder_dir?: string | null;
            /**
             * Gfpgan Dir
             * @description GFPGAN directory
             * @default ./GFPGAN
             */
            gfpgan_dir: string;
            /**
             * Gfpgan Model
             * @description GFPGAN model file name
             */
            gfpgan_model?: string | null;
            /**
             * No Half
             * @description do not switch the model to 16-bit floats
             * @default false
             */
            no_half: boolean;
            /**
             * No Half Vae
             * @description do not switch the VAE model to 16-bit floats
             * @default false
             */
            no_half_vae: boolean;
            /**
             * No Progressbar Hiding
             * @description do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)
             * @default false
             */
            no_progressbar_hiding: boolean;
            /**
             * Max Batch Count
             * @description does not do anything
             * @default 16
             */
            max_batch_count: number;
            /**
             * Embeddings Dir
             * @description embeddings directory for textual inversion (default: embeddings)
             * @default /app/sd-webui/embeddings
             */
            embeddings_dir: string;
            /**
             * Textual Inversion Templates Dir
             * @description directory with textual inversion templates
             * @default /app/sd-webui/textual_inversion_templates
             */
            textual_inversion_templates_dir: string;
            /**
             * Hypernetwork Dir
             * @description hypernetwork directory
             * @default /app/sd-webui/models/hypernetworks
             */
            hypernetwork_dir: string;
            /**
             * Localizations Dir
             * @description localizations directory
             * @default /app/sd-webui/localizations
             */
            localizations_dir: string;
            /**
             * Allow Code
             * @description allow custom script execution from webui
             * @default false
             */
            allow_code: boolean;
            /**
             * Medvram
             * @description enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage
             * @default false
             */
            medvram: boolean;
            /**
             * Medvram Sdxl
             * @description enable --medvram optimization just for SDXL models
             * @default false
             */
            medvram_sdxl: boolean;
            /**
             * Lowvram
             * @description enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage
             * @default false
             */
            lowvram: boolean;
            /**
             * Lowram
             * @description load stable diffusion checkpoint weights to VRAM instead of RAM
             * @default false
             */
            lowram: boolean;
            /**
             * Always Batch Cond Uncond
             * @description does not do anything
             * @default false
             */
            always_batch_cond_uncond: boolean;
            /**
             * Unload Gfpgan
             * @description does not do anything.
             * @default false
             */
            unload_gfpgan: boolean;
            /**
             * Precision
             * @description evaluate at this precision
             * @default autocast
             */
            precision: string;
            /**
             * Upcast Sampling
             * @description upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory.
             * @default false
             */
            upcast_sampling: boolean;
            /**
             * Share
             * @description use share=True for gradio and make the UI accessible through their site
             * @default false
             */
            share: boolean;
            /**
             * Ngrok
             * @description ngrok authtoken, alternative to gradio --share
             */
            ngrok?: string | null;
            /**
             * Ngrok Region
             * @description does not do anything.
             * @default
             */
            ngrok_region: string;
            /**
             * Ngrok Options
             * @description The options to pass to ngrok in JSON format, e.g.: '{"authtoken_from_env":true, "basic_auth":"user:password", "oauth_provider":"google", "oauth_allow_emails":"user@asdf.com"}'
             * @default {}
             */
            ngrok_options: Record<string, never>;
            /**
             * Enable Insecure Extension Access
             * @description enable extensions tab regardless of other options
             * @default false
             */
            enable_insecure_extension_access: boolean;
            /**
             * Codeformer Models Path
             * @description Path to directory with codeformer model file(s).
             * @default /app/sd-webui/models/Codeformer
             */
            codeformer_models_path: string;
            /**
             * Gfpgan Models Path
             * @description Path to directory with GFPGAN model file(s).
             * @default /app/sd-webui/models/GFPGAN
             */
            gfpgan_models_path: string;
            /**
             * Esrgan Models Path
             * @description Path to directory with ESRGAN model file(s).
             * @default /app/sd-webui/models/ESRGAN
             */
            esrgan_models_path: string;
            /**
             * Bsrgan Models Path
             * @description Path to directory with BSRGAN model file(s).
             * @default /app/sd-webui/models/BSRGAN
             */
            bsrgan_models_path: string;
            /**
             * Realesrgan Models Path
             * @description Path to directory with RealESRGAN model file(s).
             * @default /app/sd-webui/models/RealESRGAN
             */
            realesrgan_models_path: string;
            /**
             * Dat Models Path
             * @description Path to directory with DAT model file(s).
             * @default /app/sd-webui/models/DAT
             */
            dat_models_path: string;
            /**
             * Clip Models Path
             * @description Path to directory with CLIP model file(s), for Interrogate options.
             */
            clip_models_path?: string | null;
            /**
             * Xformers
             * @description enable xformers for cross attention layers
             * @default false
             */
            xformers: boolean;
            /**
             * Force Enable Xformers
             * @description enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work
             * @default false
             */
            force_enable_xformers: boolean;
            /**
             * Xformers Flash Attention
             * @description enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)
             * @default false
             */
            xformers_flash_attention: boolean;
            /**
             * Deepdanbooru
             * @description does not do anything
             * @default false
             */
            deepdanbooru: boolean;
            /**
             * Opt Split Attention
             * @description prefer Doggettx's cross-attention layer optimization for automatic choice of optimization
             * @default false
             */
            opt_split_attention: boolean;
            /**
             * Opt Sub Quad Attention
             * @description prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization
             * @default false
             */
            opt_sub_quad_attention: boolean;
            /**
             * Sub Quad Q Chunk Size
             * @description query chunk size for the sub-quadratic cross-attention layer optimization to use
             * @default 1024
             */
            sub_quad_q_chunk_size: number;
            /**
             * Sub Quad Kv Chunk Size
             * @description kv chunk size for the sub-quadratic cross-attention layer optimization to use
             */
            sub_quad_kv_chunk_size?: string | null;
            /**
             * Sub Quad Chunk Threshold
             * @description the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
             */
            sub_quad_chunk_threshold?: string | null;
            /**
             * Opt Split Attention Invokeai
             * @description prefer InvokeAI's cross-attention layer optimization for automatic choice of optimization
             * @default false
             */
            opt_split_attention_invokeai: boolean;
            /**
             * Opt Split Attention V1
             * @description prefer older version of split attention optimization for automatic choice of optimization
             * @default false
             */
            opt_split_attention_v1: boolean;
            /**
             * Opt Sdp Attention
             * @description prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*
             * @default false
             */
            opt_sdp_attention: boolean;
            /**
             * Opt Sdp No Mem Attention
             * @description prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*
             * @default false
             */
            opt_sdp_no_mem_attention: boolean;
            /**
             * Disable Opt Split Attention
             * @description prefer no cross-attention layer optimization for automatic choice of optimization
             * @default false
             */
            disable_opt_split_attention: boolean;
            /**
             * Disable Nan Check
             * @description do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI
             * @default false
             */
            disable_nan_check: boolean;
            /**
             * Use Cpu
             * @description use CPU as torch device for specified modules
             * @default []
             */
            use_cpu: unknown[];
            /**
             * Use Ipex
             * @description use Intel XPU as torch device
             * @default false
             */
            use_ipex: boolean;
            /**
             * Disable Model Loading Ram Optimization
             * @description disable an optimization that reduces RAM use when loading a model
             * @default false
             */
            disable_model_loading_ram_optimization: boolean;
            /**
             * Listen
             * @description launch gradio with 0.0.0.0 as server name, allowing to respond to network requests
             * @default false
             */
            listen: boolean;
            /**
             * Port
             * @description launch gradio with given server port, you need root/admin rights for ports < 1024, defaults to 7860 if available
             */
            port?: string | null;
            /**
             * Show Negative Prompt
             * @description does not do anything
             * @default false
             */
            show_negative_prompt: boolean;
            /**
             * Ui Config File
             * @description filename to use for ui configuration
             * @default /app/sd-webui/ui-config.json
             */
            ui_config_file: string;
            /**
             * Hide Ui Dir Config
             * @description hide directory configuration from webui
             * @default false
             */
            hide_ui_dir_config: boolean;
            /**
             * Freeze Settings
             * @description disable editing of all settings globally
             * @default false
             */
            freeze_settings: boolean;
            /**
             * Freeze Settings In Sections
             * @description disable editing settings in specific sections of the settings page by specifying a comma-delimited list such like "saving-images,upscaling". The list of setting names can be found in the modules/shared_options.py file
             */
            freeze_settings_in_sections?: string | null;
            /**
             * Freeze Specific Settings
             * @description disable editing of individual settings by specifying a comma-delimited list like "samples_save,samples_format". The list of setting names can be found in the config.json file
             */
            freeze_specific_settings?: string | null;
            /**
             * Ui Settings File
             * @description filename to use for ui settings
             * @default /app/sd-webui/config.json
             */
            ui_settings_file: string;
            /**
             * Gradio Debug
             * @description launch gradio with --debug option
             * @default false
             */
            gradio_debug: boolean;
            /**
             * Gradio Auth
             * @description set gradio authentication like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
             */
            gradio_auth?: string | null;
            /**
             * Gradio Auth Path
             * @description set gradio authentication file path ex. "/path/to/auth/file" same auth format as --gradio-auth
             */
            gradio_auth_path?: string | null;
            /**
             * Gradio Img2Img Tool
             * @description does not do anything
             */
            gradio_img2img_tool?: string | null;
            /**
             * Gradio Inpaint Tool
             * @description does not do anything
             */
            gradio_inpaint_tool?: string | null;
            /**
             * Gradio Allowed Path
             * @description add path to gradio's allowed_paths, make it possible to serve files from it
             * @default [
             *       "/app/sd-webui"
             *     ]
             */
            gradio_allowed_path: unknown[];
            /**
             * Opt Channelslast
             * @description change memory type for stable diffusion to channels last
             * @default false
             */
            opt_channelslast: boolean;
            /**
             * Styles File
             * @description path or wildcard path of styles files, allow multiple entries.
             * @default []
             */
            styles_file: unknown[];
            /**
             * Autolaunch
             * @description open the webui URL in the system's default browser upon launch
             * @default false
             */
            autolaunch: boolean;
            /**
             * Theme
             * @description launches the UI with light or dark theme
             */
            theme?: string | null;
            /**
             * Use Textbox Seed
             * @description use textbox for seeds in UI (no up/down, but possible to input long seeds)
             * @default false
             */
            use_textbox_seed: boolean;
            /**
             * Disable Console Progressbars
             * @description do not output progressbars to console
             * @default false
             */
            disable_console_progressbars: boolean;
            /**
             * Enable Console Prompts
             * @description does not do anything
             * @default false
             */
            enable_console_prompts: boolean;
            /**
             * Vae Path
             * @description Checkpoint to use as VAE; setting this argument disables all settings related to VAE
             */
            vae_path?: string | null;
            /**
             * Disable Safe Unpickle
             * @description disable checking pytorch models for malicious code
             * @default false
             */
            disable_safe_unpickle: boolean;
            /**
             * Api
             * @description use api=True to launch the API together with the webui (use --nowebui instead for only the API)
             * @default false
             */
            api: boolean;
            /**
             * Api Auth
             * @description Set authentication for API like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
             */
            api_auth?: string | null;
            /**
             * Api Log
             * @description use api-log=True to enable logging of all API requests
             * @default false
             */
            api_log: boolean;
            /**
             * Nowebui
             * @description use api=True to launch the API instead of the webui
             * @default false
             */
            nowebui: boolean;
            /**
             * Ui Debug Mode
             * @description Don't load model to quickly launch UI
             * @default false
             */
            ui_debug_mode: boolean;
            /**
             * Device Id
             * @description Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)
             */
            device_id?: string | null;
            /**
             * Administrator
             * @description Administrator rights
             * @default false
             */
            administrator: boolean;
            /**
             * Cors Allow Origins
             * @description Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
             */
            cors_allow_origins?: string | null;
            /**
             * Cors Allow Origins Regex
             * @description Allowed CORS origin(s) in the form of a single regular expression
             */
            cors_allow_origins_regex?: string | null;
            /**
             * Tls Keyfile
             * @description Partially enables TLS, requires --tls-certfile to fully function
             */
            tls_keyfile?: string | null;
            /**
             * Tls Certfile
             * @description Partially enables TLS, requires --tls-keyfile to fully function
             */
            tls_certfile?: string | null;
            /**
             * Disable Tls Verify
             * @description When passed, enables the use of self-signed certificates.
             */
            disable_tls_verify?: string | null;
            /**
             * Server Name
             * @description Sets hostname of server
             */
            server_name?: string | null;
            /**
             * Gradio Queue
             * @description does not do anything
             * @default true
             */
            gradio_queue: boolean;
            /**
             * No Gradio Queue
             * @description Disables gradio queue; causes the webpage to use http requests instead of websockets; was the default in earlier versions
             * @default false
             */
            no_gradio_queue: boolean;
            /**
             * Skip Version Check
             * @description Do not check versions of torch and xformers
             * @default false
             */
            skip_version_check: boolean;
            /**
             * No Hashing
             * @description disable sha256 hashing of checkpoints to help loading performance
             * @default false
             */
            no_hashing: boolean;
            /**
             * No Download Sd Model
             * @description don't download SD1.5 model even if no model is found in --ckpt-dir
             * @default false
             */
            no_download_sd_model: boolean;
            /**
             * Subpath
             * @description customize the subpath for gradio, use with reverse proxy
             */
            subpath?: string | null;
            /**
             * Add Stop Route
             * @description does not do anything
             * @default false
             */
            add_stop_route: boolean;
            /**
             * Api Server Stop
             * @description enable server stop/restart/kill via api
             * @default false
             */
            api_server_stop: boolean;
            /**
             * Timeout Keep Alive
             * @description set timeout_keep_alive for uvicorn
             * @default 30
             */
            timeout_keep_alive: number;
            /**
             * Disable All Extensions
             * @description prevent all extensions from running regardless of any other settings
             * @default false
             */
            disable_all_extensions: boolean;
            /**
             * Disable Extra Extensions
             * @description prevent all extensions except built-in from running regardless of any other settings
             * @default false
             */
            disable_extra_extensions: boolean;
            /**
             * Skip Load Model At Start
             * @description if load a model at web start, only take effect when --nowebui
             * @default false
             */
            skip_load_model_at_start: boolean;
            /**
             * Unix Filenames Sanitization
             * @description allow any symbols except '/' in filenames. May conflict with your browser and file system
             * @default false
             */
            unix_filenames_sanitization: boolean;
            /**
             * Filenames Max Length
             * @description maximal length of filenames of saved images. If you override it, it can conflict with your file system
             * @default 128
             */
            filenames_max_length: number;
            /**
             * No Prompt History
             * @description disable read prompt from last generation feature; settings this argument will not create '--data_path/params.txt' file
             * @default false
             */
            no_prompt_history: boolean;
            /**
             * Forge Ref A1111 Home
             * @description Look for models in an existing A1111 checkout's path
             */
            forge_ref_a1111_home?: string | null;
            /**
             * Controlnet Dir
             * @description Path to directory with ControlNet models
             */
            controlnet_dir?: string | null;
            /**
             * Controlnet Preprocessor Models Dir
             * @description Path to directory with annotator model directories
             */
            controlnet_preprocessor_models_dir?: string | null;
            /**
             * Scunet Models Path
             * @description Path to directory with ScuNET model file(s).
             * @default /app/sd-webui/models/ScuNET
             */
            scunet_models_path: string;
            /**
             * Swinir Models Path
             * @description Path to directory with SwinIR model file(s).
             * @default /app/sd-webui/models/SwinIR
             */
            swinir_models_path: string;
            /**
             * Controlnet Loglevel
             * @description Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
             * @default INFO
             */
            controlnet_loglevel: string;
            /**
             * Controlnet Tracemalloc
             * @description Enable memory tracing.
             */
            controlnet_tracemalloc?: string | null;
            /**
             * Lora Dir
             * @description Path to directory with Lora networks.
             * @default /app/sd-webui/models/Lora
             */
            lora_dir: string;
            /**
             * Lyco Dir Backcompat
             * @description Path to directory with LyCORIS networks (for backawards compatibility; can also use --lyco-dir).
             * @default /app/sd-webui/models/LyCORIS
             */
            lyco_dir_backcompat: string;
        };
        /** GeninfoBatchReq */
        GeninfoBatchReq: {
            /** Paths */
            paths: string[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HypernetworkItem */
        HypernetworkItem: {
            /** Name */
            name: string;
            /** Path */
            path: string | null;
        };
        /** ImageToImageResponse */
        ImageToImageResponse: {
            /**
             * Image
             * @description The generated image in base64 format.
             */
            images?: string[] | null;
            /** Parameters */
            parameters: Record<string, never>;
            /** Info */
            info: string;
        };
        /** InterrogateRequest */
        InterrogateRequest: {
            /**
             * Image
             * @description Image to work on, must be a Base64 string containing the image's data.
             * @default
             */
            image: string;
            /**
             * Model
             * @description The interrogate model used.
             * @default clip
             */
            model: string;
        };
        /** LatentUpscalerModeItem */
        LatentUpscalerModeItem: {
            /** Name */
            name: string;
        };
        /** MatchImagesByTagsReq */
        MatchImagesByTagsReq: {
            /** And Tags */
            and_tags: number[];
            /** Or Tags */
            or_tags: number[];
            /** Not Tags */
            not_tags: number[];
            /** Cursor */
            cursor: string;
            /** Folder Paths */
            folder_paths?: string[];
            /**
             * Size
             * @default 200
             */
            size: number | null;
        };
        /** MemoryResponse */
        MemoryResponse: {
            /**
             * RAM
             * @description System memory stats
             */
            ram: Record<string, never>;
            /**
             * CUDA
             * @description nVidia CUDA memory stats
             */
            cuda: Record<string, never>;
        };
        /** MoveFilesReq */
        MoveFilesReq: {
            /** File Paths */
            file_paths: string[];
            /** Dest */
            dest: string;
            /**
             * Create Dest Folder
             * @default false
             */
            create_dest_folder: boolean | null;
        };
        /** OpenFolderReq */
        OpenFolderReq: {
            /** Path */
            path: string;
        };
        /** Options */
        Options: {
            /**
             * Samples Save
             * @description Always save all generated images
             * @default true
             */
            samples_save: boolean | null;
            /**
             * Samples Format
             * @description File format for images
             * @default png
             */
            samples_format: string | null;
            /**
             * Samples Filename Pattern
             * @description Images filename pattern
             * @default
             */
            samples_filename_pattern: unknown | null;
            /**
             * Save Images Add Number
             * @description Add number to filename when saving
             * @default true
             */
            save_images_add_number: boolean | null;
            /**
             * Save Images Replace Action
             * @description Saving the image to an existing file
             * @default Replace
             */
            save_images_replace_action: string | null;
            /**
             * Grid Save
             * @description Always save all generated image grids
             * @default true
             */
            grid_save: boolean | null;
            /**
             * Grid Format
             * @description File format for grids
             * @default png
             */
            grid_format: string | null;
            /**
             * Grid Extended Filename
             * @description Add extended info (seed, prompt) to filename when saving grid
             * @default false
             */
            grid_extended_filename: unknown | null;
            /**
             * Grid Only If Multiple
             * @description Do not save grids consisting of one picture
             * @default true
             */
            grid_only_if_multiple: boolean | null;
            /**
             * Grid Prevent Empty Spots
             * @description Prevent empty spots in grid (when set to autodetect)
             * @default false
             */
            grid_prevent_empty_spots: unknown | null;
            /**
             * Grid Zip Filename Pattern
             * @description Archive filename pattern
             * @default
             */
            grid_zip_filename_pattern: unknown | null;
            /**
             * N Rows
             * @description Grid row count; use -1 for autodetect and 0 for it to be same as batch size
             * @default -1
             */
            n_rows: number | null;
            /**
             * Font
             * @description Font for image grids that have text
             * @default
             */
            font: unknown | null;
            /**
             * Grid Text Active Color
             * @description Text color for image grids
             * @default #000000
             */
            grid_text_active_color: string | null;
            /**
             * Grid Text Inactive Color
             * @description Inactive text color for image grids
             * @default #999999
             */
            grid_text_inactive_color: string | null;
            /**
             * Grid Background Color
             * @description Background color for image grids
             * @default #ffffff
             */
            grid_background_color: string | null;
            /**
             * Save Images Before Face Restoration
             * @description Save a copy of image before doing face restoration.
             * @default false
             */
            save_images_before_face_restoration: unknown | null;
            /**
             * Save Images Before Highres Fix
             * @description Save a copy of image before applying highres fix.
             * @default false
             */
            save_images_before_highres_fix: unknown | null;
            /**
             * Save Images Before Color Correction
             * @description Save a copy of image before applying color correction to img2img results
             * @default false
             */
            save_images_before_color_correction: unknown | null;
            /**
             * Save Mask
             * @description For inpainting, save a copy of the greyscale mask
             * @default false
             */
            save_mask: unknown | null;
            /**
             * Save Mask Composite
             * @description For inpainting, save a masked composite
             * @default false
             */
            save_mask_composite: unknown | null;
            /**
             * Jpeg Quality
             * @description Quality for saved jpeg and avif images
             * @default 80
             */
            jpeg_quality: number | null;
            /**
             * Webp Lossless
             * @description Use lossless compression for webp images
             * @default false
             */
            webp_lossless: unknown | null;
            /**
             * Export For 4Chan
             * @description Save copy of large images as JPG
             * @default true
             */
            export_for_4chan: boolean | null;
            /**
             * Img Downscale Threshold
             * @description File size limit for the above option, MB
             * @default 4
             */
            img_downscale_threshold: number | null;
            /**
             * Target Side Length
             * @description Width/height limit for the above option, in pixels
             * @default 4000
             */
            target_side_length: number | null;
            /**
             * Img Max Size Mp
             * @description Maximum image size
             * @default 200
             */
            img_max_size_mp: number | null;
            /**
             * Use Original Name Batch
             * @description Use original name for output filename during batch process in extras tab
             * @default true
             */
            use_original_name_batch: boolean | null;
            /**
             * Use Upscaler Name As Suffix
             * @description Use upscaler name as filename suffix in the extras tab
             * @default false
             */
            use_upscaler_name_as_suffix: unknown | null;
            /**
             * Save Selected Only
             * @description When using 'Save' button, only save a single selected image
             * @default true
             */
            save_selected_only: boolean | null;
            /**
             * Save Write Log Csv
             * @description Write log.csv when saving images using 'Save' button
             * @default true
             */
            save_write_log_csv: boolean | null;
            /**
             * Save Init Img
             * @description Save init images when using img2img
             * @default false
             */
            save_init_img: unknown | null;
            /**
             * Temp Dir
             * @description Directory for temporary images; leave empty for default
             * @default
             */
            temp_dir: unknown | null;
            /**
             * Clean Temp Dir At Start
             * @description Cleanup non-default temporary directory when starting webui
             * @default false
             */
            clean_temp_dir_at_start: unknown | null;
            /**
             * Save Incomplete Images
             * @description Save incomplete images
             * @default false
             */
            save_incomplete_images: unknown | null;
            /**
             * Notification Audio
             * @description Play notification sound after image generation
             * @default true
             */
            notification_audio: boolean | null;
            /**
             * Notification Volume
             * @description Notification sound volume
             * @default 100
             */
            notification_volume: number | null;
            /**
             * Outdir Samples
             * @description Output directory for images; if empty, defaults to three directories below
             * @default
             */
            outdir_samples: unknown | null;
            /**
             * Outdir Txt2Img Samples
             * @description Output directory for txt2img images
             * @default outputs/txt2img-images
             */
            outdir_txt2img_samples: string | null;
            /**
             * Outdir Img2Img Samples
             * @description Output directory for img2img images
             * @default outputs/img2img-images
             */
            outdir_img2img_samples: string | null;
            /**
             * Outdir Extras Samples
             * @description Output directory for images from extras tab
             * @default outputs/extras-images
             */
            outdir_extras_samples: string | null;
            /**
             * Outdir Grids
             * @description Output directory for grids; if empty, defaults to two directories below
             * @default
             */
            outdir_grids: unknown | null;
            /**
             * Outdir Txt2Img Grids
             * @description Output directory for txt2img grids
             * @default outputs/txt2img-grids
             */
            outdir_txt2img_grids: string | null;
            /**
             * Outdir Img2Img Grids
             * @description Output directory for img2img grids
             * @default outputs/img2img-grids
             */
            outdir_img2img_grids: string | null;
            /**
             * Outdir Save
             * @description Directory for saving images using the Save button
             * @default log/images
             */
            outdir_save: string | null;
            /**
             * Outdir Init Images
             * @description Directory for saving init images when using img2img
             * @default outputs/init-images
             */
            outdir_init_images: string | null;
            /**
             * Save To Dirs
             * @description Save images to a subdirectory
             * @default true
             */
            save_to_dirs: boolean | null;
            /**
             * Grid Save To Dirs
             * @description Save grids to a subdirectory
             * @default true
             */
            grid_save_to_dirs: boolean | null;
            /**
             * Use Save To Dirs For Ui
             * @description When using "Save" button, save images to a subdirectory
             * @default false
             */
            use_save_to_dirs_for_ui: unknown | null;
            /**
             * Directories Filename Pattern
             * @description Directory name pattern
             * @default [date]
             */
            directories_filename_pattern: string | null;
            /**
             * Directories Max Prompt Words
             * @description Max prompt words for [prompt_words] pattern
             * @default 8
             */
            directories_max_prompt_words: number | null;
            /**
             * Esrgan Tile
             * @description Tile size for ESRGAN upscalers.
             * @default 192
             */
            ESRGAN_tile: number | null;
            /**
             * Esrgan Tile Overlap
             * @description Tile overlap for ESRGAN upscalers.
             * @default 8
             */
            ESRGAN_tile_overlap: number | null;
            /**
             * Realesrgan Enabled Models
             * @description Select which Real-ESRGAN models to show in the web UI.
             * @default [
             *       "R-ESRGAN 4x+",
             *       "R-ESRGAN 4x+ Anime6B"
             *     ]
             */
            realesrgan_enabled_models: unknown[] | null;
            /**
             * Dat Enabled Models
             * @description Select which DAT models to show in the web UI.
             * @default [
             *       "DAT x2",
             *       "DAT x3",
             *       "DAT x4"
             *     ]
             */
            dat_enabled_models: unknown[] | null;
            /**
             * Dat Tile
             * @description Tile size for DAT upscalers.
             * @default 192
             */
            DAT_tile: number | null;
            /**
             * Dat Tile Overlap
             * @description Tile overlap for DAT upscalers.
             * @default 8
             */
            DAT_tile_overlap: number | null;
            /**
             * Upscaler For Img2Img
             * @description Upscaler for img2img
             */
            upscaler_for_img2img?: unknown | null;
            /**
             * Set Scale By When Changing Upscaler
             * @description Automatically set the Scale by factor based on the name of the selected Upscaler.
             * @default false
             */
            set_scale_by_when_changing_upscaler: unknown | null;
            /**
             * Face Restoration
             * @description Restore faces
             * @default false
             */
            face_restoration: unknown | null;
            /**
             * Face Restoration Model
             * @description Face restoration model
             * @default CodeFormer
             */
            face_restoration_model: string | null;
            /**
             * Code Former Weight
             * @description CodeFormer weight
             * @default 0.5
             */
            code_former_weight: number | null;
            /**
             * Face Restoration Unload
             * @description Move face restoration model from VRAM into RAM after processing
             * @default false
             */
            face_restoration_unload: unknown | null;
            /**
             * Auto Launch Browser
             * @description Automatically open webui in browser on startup
             * @default Local
             */
            auto_launch_browser: string | null;
            /**
             * Enable Console Prompts
             * @description Print prompts to console when generating with txt2img and img2img.
             * @default false
             */
            enable_console_prompts: unknown | null;
            /**
             * Show Warnings
             * @description Show warnings in console.
             * @default false
             */
            show_warnings: unknown | null;
            /**
             * Show Gradio Deprecation Warnings
             * @description Show gradio deprecation warnings in console.
             * @default true
             */
            show_gradio_deprecation_warnings: boolean | null;
            /**
             * Memmon Poll Rate
             * @description VRAM usage polls per second during generation.
             * @default 8
             */
            memmon_poll_rate: number | null;
            /**
             * Samples Log Stdout
             * @description Always print all generation info to standard output
             * @default false
             */
            samples_log_stdout: unknown | null;
            /**
             * Multiple Tqdm
             * @description Add a second progress bar to the console that shows progress for an entire job.
             * @default true
             */
            multiple_tqdm: boolean | null;
            /**
             * Enable Upscale Progressbar
             * @description Show a progress bar in the console for tiled upscaling.
             * @default true
             */
            enable_upscale_progressbar: boolean | null;
            /**
             * Print Hypernet Extra
             * @description Print extra hypernetwork information to console.
             * @default false
             */
            print_hypernet_extra: unknown | null;
            /**
             * List Hidden Files
             * @description Load models/files in hidden directories
             * @default true
             */
            list_hidden_files: boolean | null;
            /**
             * Disable Mmap Load Safetensors
             * @description Disable memmapping for loading .safetensors files.
             * @default false
             */
            disable_mmap_load_safetensors: unknown | null;
            /**
             * Hide Ldm Prints
             * @description Prevent Stability-AI's ldm/sgm modules from printing noise to console.
             * @default true
             */
            hide_ldm_prints: boolean | null;
            /**
             * Dump Stacks On Signal
             * @description Print stack traces before exiting the program with ctrl+c.
             * @default false
             */
            dump_stacks_on_signal: unknown | null;
            /**
             * Profiling Explanation
             * @default Those settings allow you to enable torch profiler when generating pictures.
             *     Profiling allows you to see which code uses how much of computer's resources during generation.
             *     Each generation writes its own profile to one file, overwriting previous.
             *     The file can be viewed in <a href="chrome:tracing">Chrome</a>, or on a <a href="https://ui.perfetto.dev/">Perfetto</a> web site.
             *     Warning: writing profile can take a lot of time, up to 30 seconds, and the file itelf can be around 500MB in size.
             */
            profiling_explanation: string | null;
            /**
             * Profiling Enable
             * @description Enable profiling
             * @default false
             */
            profiling_enable: unknown | null;
            /**
             * Profiling Activities
             * @description Activities
             * @default [
             *       "CPU"
             *     ]
             */
            profiling_activities: unknown[] | null;
            /**
             * Profiling Record Shapes
             * @description Record shapes
             * @default true
             */
            profiling_record_shapes: boolean | null;
            /**
             * Profiling Profile Memory
             * @description Profile memory
             * @default true
             */
            profiling_profile_memory: boolean | null;
            /**
             * Profiling With Stack
             * @description Include python stack
             * @default true
             */
            profiling_with_stack: boolean | null;
            /**
             * Profiling Filename
             * @description Profile filename
             * @default trace.json
             */
            profiling_filename: string | null;
            /**
             * Api Enable Requests
             * @description Allow http:// and https:// URLs for input images in API
             * @default true
             */
            api_enable_requests: boolean | null;
            /**
             * Api Forbid Local Requests
             * @description Forbid URLs to local resources
             * @default true
             */
            api_forbid_local_requests: boolean | null;
            /**
             * Api Useragent
             * @description User agent for requests
             * @default
             */
            api_useragent: unknown | null;
            /**
             * Unload Models When Training
             * @description Move VAE and CLIP to RAM when training if possible. Saves VRAM.
             * @default false
             */
            unload_models_when_training: unknown | null;
            /**
             * Pin Memory
             * @description Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.
             * @default false
             */
            pin_memory: unknown | null;
            /**
             * Save Optimizer State
             * @description Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.
             * @default false
             */
            save_optimizer_state: unknown | null;
            /**
             * Save Training Settings To Txt
             * @description Save textual inversion and hypernet settings to a text file whenever training starts.
             * @default true
             */
            save_training_settings_to_txt: boolean | null;
            /**
             * Dataset Filename Word Regex
             * @description Filename word regex
             * @default
             */
            dataset_filename_word_regex: unknown | null;
            /**
             * Dataset Filename Join String
             * @description Filename join string
             * @default
             */
            dataset_filename_join_string: string | null;
            /**
             * Training Image Repeats Per Epoch
             * @description Number of repeats for a single input image per epoch; used only for displaying epoch number
             * @default 1
             */
            training_image_repeats_per_epoch: number | null;
            /**
             * Training Write Csv Every
             * @description Save an csv containing the loss to log directory every N steps, 0 to disable
             * @default 500
             */
            training_write_csv_every: number | null;
            /**
             * Training Xattention Optimizations
             * @description Use cross attention optimizations while training
             * @default false
             */
            training_xattention_optimizations: unknown | null;
            /**
             * Training Enable Tensorboard
             * @description Enable tensorboard logging.
             * @default false
             */
            training_enable_tensorboard: unknown | null;
            /**
             * Training Tensorboard Save Images
             * @description Save generated images within tensorboard.
             * @default false
             */
            training_tensorboard_save_images: unknown | null;
            /**
             * Training Tensorboard Flush Every
             * @description How often, in seconds, to flush the pending tensorboard events and summaries to disk.
             * @default 120
             */
            training_tensorboard_flush_every: number | null;
            /**
             * Sd Model Checkpoint
             * @description (Managed by Forge)
             */
            sd_model_checkpoint?: unknown | null;
            /**
             * Sd Checkpoints Limit
             * @description Maximum number of checkpoints loaded at the same time
             * @default 1
             */
            sd_checkpoints_limit: number | null;
            /**
             * Sd Checkpoints Keep In Cpu
             * @description Only keep one model on device
             * @default true
             */
            sd_checkpoints_keep_in_cpu: boolean | null;
            /**
             * Sd Checkpoint Cache
             * @description Checkpoints to cache in RAM
             * @default 0
             */
            sd_checkpoint_cache: unknown | null;
            /**
             * Sd Unet
             * @description SD Unet
             * @default Automatic
             */
            sd_unet: string | null;
            /**
             * Enable Quantization
             * @description Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds
             * @default false
             */
            enable_quantization: unknown | null;
            /**
             * Emphasis
             * @description Emphasis mode
             * @default Original
             */
            emphasis: string | null;
            /**
             * Enable Batch Seeds
             * @description Make K-diffusion samplers produce same images in a batch as when making a single image
             * @default true
             */
            enable_batch_seeds: boolean | null;
            /**
             * Comma Padding Backtrack
             * @description Prompt word wrap length limit
             * @default 20
             */
            comma_padding_backtrack: number | null;
            /**
             * Sdxl Clip L Skip
             * @description Clip skip SDXL
             * @default false
             */
            sdxl_clip_l_skip: unknown | null;
            /**
             * Clip Stop At Last Layers
             * @description (Managed by Forge)
             * @default 1
             */
            CLIP_stop_at_last_layers: number | null;
            /**
             * Upcast Attn
             * @description Upcast cross attention layer to float32
             * @default false
             */
            upcast_attn: unknown | null;
            /**
             * Randn Source
             * @description Random number generator source.
             * @default GPU
             */
            randn_source: string | null;
            /**
             * Tiling
             * @description Tiling
             * @default false
             */
            tiling: unknown | null;
            /**
             * Hires Fix Refiner Pass
             * @description Hires fix: which pass to enable refiner for
             * @default second pass
             */
            hires_fix_refiner_pass: string | null;
            /**
             * Sdxl Crop Top
             * @description crop top coordinate
             * @default 0
             */
            sdxl_crop_top: unknown | null;
            /**
             * Sdxl Crop Left
             * @description crop left coordinate
             * @default 0
             */
            sdxl_crop_left: unknown | null;
            /**
             * Sdxl Refiner Low Aesthetic Score
             * @description SDXL low aesthetic score
             * @default 2.5
             */
            sdxl_refiner_low_aesthetic_score: number | null;
            /**
             * Sdxl Refiner High Aesthetic Score
             * @description SDXL high aesthetic score
             * @default 6
             */
            sdxl_refiner_high_aesthetic_score: number | null;
            /**
             * Sd3 Enable T5
             * @description Enable T5
             * @default false
             */
            sd3_enable_t5: unknown | null;
            /**
             * Sd Vae Explanation
             * @default <abbr title='Variational autoencoder'>VAE</abbr> is a neural network that transforms a standard <abbr title='red/green/blue'>RGB</abbr>
             *     image into latent space representation and back. Latent space representation is what stable diffusion is working on during sampling
             *     (i.e. when the progress bar is between empty and full). For txt2img, VAE is used to create a resulting image after the sampling is finished.
             *     For img2img, VAE is used to process user's input image before the sampling, and to create an image after sampling.
             */
            sd_vae_explanation: string | null;
            /**
             * Sd Vae Checkpoint Cache
             * @description VAE Checkpoints to cache in RAM
             * @default 0
             */
            sd_vae_checkpoint_cache: unknown | null;
            /**
             * Sd Vae
             * @description (Managed by Forge)
             * @default Automatic
             */
            sd_vae: string | null;
            /**
             * Sd Vae Overrides Per Model Preferences
             * @description Selected VAE overrides per-model preferences
             * @default true
             */
            sd_vae_overrides_per_model_preferences: boolean | null;
            /**
             * Auto Vae Precision Bfloat16
             * @description Automatically convert VAE to bfloat16
             * @default false
             */
            auto_vae_precision_bfloat16: unknown | null;
            /**
             * Auto Vae Precision
             * @description Automatically revert VAE to 32-bit floats
             * @default true
             */
            auto_vae_precision: boolean | null;
            /**
             * Sd Vae Encode Method
             * @description VAE type for encode
             * @default Full
             */
            sd_vae_encode_method: string | null;
            /**
             * Sd Vae Decode Method
             * @description VAE type for decode
             * @default Full
             */
            sd_vae_decode_method: string | null;
            /**
             * Inpainting Mask Weight
             * @description Inpainting conditioning mask strength
             * @default 1
             */
            inpainting_mask_weight: number | null;
            /**
             * Initial Noise Multiplier
             * @description Noise multiplier for img2img
             * @default 1
             */
            initial_noise_multiplier: number | null;
            /**
             * Img2Img Extra Noise
             * @description Extra noise multiplier for img2img and hires fix
             * @default 0
             */
            img2img_extra_noise: unknown | null;
            /**
             * Img2Img Color Correction
             * @description Apply color correction to img2img results to match original colors.
             * @default false
             */
            img2img_color_correction: unknown | null;
            /**
             * Img2Img Fix Steps
             * @description With img2img, do exactly the amount of steps the slider specifies.
             * @default false
             */
            img2img_fix_steps: unknown | null;
            /**
             * Img2Img Background Color
             * @description With img2img, fill transparent parts of the input image with this color.
             * @default #ffffff
             */
            img2img_background_color: string | null;
            /**
             * Img2Img Sketch Default Brush Color
             * @description Sketch initial brush color
             * @default #ffffff
             */
            img2img_sketch_default_brush_color: string | null;
            /**
             * Img2Img Inpaint Mask Brush Color
             * @description Inpaint mask brush color
             * @default #ffffff
             */
            img2img_inpaint_mask_brush_color: string | null;
            /**
             * Img2Img Inpaint Sketch Default Brush Color
             * @description Inpaint sketch initial brush color
             * @default #ffffff
             */
            img2img_inpaint_sketch_default_brush_color: string | null;
            /**
             * Img2Img Inpaint Mask High Contrast
             * @description For inpainting, use a high-contrast brush pattern
             * @default true
             */
            img2img_inpaint_mask_high_contrast: boolean | null;
            /**
             * Img2Img Inpaint Mask Scribble Alpha
             * @description Inpaint mask alpha (transparency)
             * @default 75
             */
            img2img_inpaint_mask_scribble_alpha: number | null;
            /**
             * Return Mask
             * @description For inpainting, include the greyscale mask in results for web
             * @default false
             */
            return_mask: unknown | null;
            /**
             * Return Mask Composite
             * @description For inpainting, include masked composite in results for web
             * @default false
             */
            return_mask_composite: unknown | null;
            /**
             * Img2Img Batch Show Results Limit
             * @description Show the first N batch img2img results in UI
             * @default 32
             */
            img2img_batch_show_results_limit: number | null;
            /**
             * Overlay Inpaint
             * @description Overlay original for inpaint
             * @default true
             */
            overlay_inpaint: boolean | null;
            /**
             * Img2Img Autosize
             * @description After loading into Img2img, automatically update Width and Height
             * @default false
             */
            img2img_autosize: unknown | null;
            /**
             * Img2Img Batch Use Original Name
             * @description Save using original filename in img2img batch. Applies to 'Upload' and 'From directory' tabs.
             * @default false
             */
            img2img_batch_use_original_name: unknown | null;
            /**
             * Cross Attention Optimization
             * @description Cross attention optimization
             * @default Automatic
             */
            cross_attention_optimization: string | null;
            /**
             * S Min Uncond
             * @description Negative Guidance minimum sigma
             * @default 0
             */
            s_min_uncond: unknown | null;
            /**
             * S Min Uncond All
             * @description Negative Guidance minimum sigma all steps
             * @default false
             */
            s_min_uncond_all: unknown | null;
            /**
             * Token Merging Ratio
             * @description Token merging ratio
             * @default 0
             */
            token_merging_ratio: unknown | null;
            /**
             * Token Merging Ratio Img2Img
             * @description Token merging ratio for img2img
             * @default 0
             */
            token_merging_ratio_img2img: unknown | null;
            /**
             * Token Merging Ratio Hr
             * @description Token merging ratio for high-res pass
             * @default 0
             */
            token_merging_ratio_hr: unknown | null;
            /**
             * Pad Cond Uncond
             * @description Pad prompt/negative prompt
             * @default false
             */
            pad_cond_uncond: unknown | null;
            /**
             * Pad Cond Uncond V0
             * @description Pad prompt/negative prompt (v0)
             * @default false
             */
            pad_cond_uncond_v0: unknown | null;
            /**
             * Persistent Cond Cache
             * @description Persistent cond cache
             * @default true
             */
            persistent_cond_cache: boolean | null;
            /**
             * Batch Cond Uncond
             * @description Batch cond/uncond
             * @default true
             */
            batch_cond_uncond: boolean | null;
            /**
             * Fp8 Storage
             * @description FP8 weight
             * @default Disable
             */
            fp8_storage: string | null;
            /**
             * Cache Fp16 Weight
             * @description Cache FP16 weight for LoRA
             * @default false
             */
            cache_fp16_weight: unknown | null;
            /**
             * Forge Try Reproduce
             * @description Try to reproduce the results from external software
             * @default None
             */
            forge_try_reproduce: string | null;
            /**
             * Auto Backcompat
             * @description Automatic backward compatibility
             * @default true
             */
            auto_backcompat: boolean | null;
            /**
             * Use Old Emphasis Implementation
             * @description Use old emphasis implementation. Can be useful to reproduce old seeds.
             * @default false
             */
            use_old_emphasis_implementation: unknown | null;
            /**
             * Use Old Karras Scheduler Sigmas
             * @description Use old karras scheduler sigmas (0.1 to 10).
             * @default false
             */
            use_old_karras_scheduler_sigmas: unknown | null;
            /**
             * No Dpmpp Sde Batch Determinism
             * @description Do not make DPM++ SDE deterministic across different batch sizes.
             * @default false
             */
            no_dpmpp_sde_batch_determinism: unknown | null;
            /**
             * Use Old Hires Fix Width Height
             * @description For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).
             * @default false
             */
            use_old_hires_fix_width_height: unknown | null;
            /**
             * Hires Fix Use Firstpass Conds
             * @description For hires fix, calculate conds of second pass using extra networks of first pass.
             * @default false
             */
            hires_fix_use_firstpass_conds: unknown | null;
            /**
             * Use Old Scheduling
             * @description Use old prompt editing timelines.
             * @default false
             */
            use_old_scheduling: unknown | null;
            /**
             * Use Downcasted Alpha Bar
             * @description Downcast model alphas_cumprod to fp16 before sampling. For reproducing old seeds.
             * @default false
             */
            use_downcasted_alpha_bar: unknown | null;
            /**
             * Refiner Switch By Sample Steps
             * @description Switch to refiner by sampling steps instead of model timesteps. Old behavior for refiner.
             * @default false
             */
            refiner_switch_by_sample_steps: unknown | null;
            /**
             * Interrogate Keep Models In Memory
             * @description Keep models in VRAM
             * @default false
             */
            interrogate_keep_models_in_memory: unknown | null;
            /**
             * Interrogate Return Ranks
             * @description Include ranks of model tags matches in results.
             * @default false
             */
            interrogate_return_ranks: unknown | null;
            /**
             * Interrogate Clip Num Beams
             * @description BLIP: num_beams
             * @default 1
             */
            interrogate_clip_num_beams: number | null;
            /**
             * Interrogate Clip Min Length
             * @description BLIP: minimum description length
             * @default 24
             */
            interrogate_clip_min_length: number | null;
            /**
             * Interrogate Clip Max Length
             * @description BLIP: maximum description length
             * @default 48
             */
            interrogate_clip_max_length: number | null;
            /**
             * Interrogate Clip Dict Limit
             * @description CLIP: maximum number of lines in text file
             * @default 1500
             */
            interrogate_clip_dict_limit: number | null;
            /**
             * Interrogate Clip Skip Categories
             * @description CLIP: skip inquire categories
             * @default []
             */
            interrogate_clip_skip_categories: unknown | null;
            /**
             * Interrogate Deepbooru Score Threshold
             * @description deepbooru: score threshold
             * @default 0.5
             */
            interrogate_deepbooru_score_threshold: number | null;
            /**
             * Deepbooru Sort Alpha
             * @description deepbooru: sort tags alphabetically
             * @default true
             */
            deepbooru_sort_alpha: boolean | null;
            /**
             * Deepbooru Use Spaces
             * @description deepbooru: use spaces in tags
             * @default true
             */
            deepbooru_use_spaces: boolean | null;
            /**
             * Deepbooru Escape
             * @description deepbooru: escape (\) brackets
             * @default true
             */
            deepbooru_escape: boolean | null;
            /**
             * Deepbooru Filter Tags
             * @description deepbooru: filter out those tags
             * @default
             */
            deepbooru_filter_tags: unknown | null;
            /**
             * Extra Networks Show Hidden Directories
             * @description Show hidden directories
             * @default true
             */
            extra_networks_show_hidden_directories: boolean | null;
            /**
             * Extra Networks Dir Button Function
             * @description Add a '/' to the beginning of directory buttons
             * @default false
             */
            extra_networks_dir_button_function: unknown | null;
            /**
             * Extra Networks Hidden Models
             * @description Show cards for models in hidden directories
             * @default When searched
             */
            extra_networks_hidden_models: string | null;
            /**
             * Extra Networks Default Multiplier
             * @description Default multiplier for extra networks
             * @default 1
             */
            extra_networks_default_multiplier: number | null;
            /**
             * Extra Networks Card Width
             * @description Card width for Extra Networks
             * @default 0
             */
            extra_networks_card_width: unknown | null;
            /**
             * Extra Networks Card Height
             * @description Card height for Extra Networks
             * @default 0
             */
            extra_networks_card_height: unknown | null;
            /**
             * Extra Networks Card Text Scale
             * @description Card text scale
             * @default 1
             */
            extra_networks_card_text_scale: number | null;
            /**
             * Extra Networks Card Show Desc
             * @description Show description on card
             * @default true
             */
            extra_networks_card_show_desc: boolean | null;
            /**
             * Extra Networks Card Description Is Html
             * @description Treat card description as HTML
             * @default false
             */
            extra_networks_card_description_is_html: unknown | null;
            /**
             * Extra Networks Card Order Field
             * @description Default order field for Extra Networks cards
             * @default Path
             */
            extra_networks_card_order_field: string | null;
            /**
             * Extra Networks Card Order
             * @description Default order for Extra Networks cards
             * @default Ascending
             */
            extra_networks_card_order: string | null;
            /**
             * Extra Networks Tree View Style
             * @description Extra Networks directory view style
             * @default Dirs
             */
            extra_networks_tree_view_style: string | null;
            /**
             * Extra Networks Tree View Default Enabled
             * @description Show the Extra Networks directory view by default
             * @default true
             */
            extra_networks_tree_view_default_enabled: boolean | null;
            /**
             * Extra Networks Tree View Default Width
             * @description Default width for the Extra Networks directory tree view
             * @default 180
             */
            extra_networks_tree_view_default_width: number | null;
            /**
             * Extra Networks Add Text Separator
             * @description Extra networks separator
             * @default
             */
            extra_networks_add_text_separator: string | null;
            /**
             * Ui Extra Networks Tab Reorder
             * @description Extra networks tab order
             * @default
             */
            ui_extra_networks_tab_reorder: unknown | null;
            /**
             * Textual Inversion Print At Load
             * @description Print a list of Textual Inversion embeddings when loading model
             * @default false
             */
            textual_inversion_print_at_load: unknown | null;
            /**
             * Textual Inversion Add Hashes To Infotext
             * @description Add Textual Inversion hashes to infotext
             * @default true
             */
            textual_inversion_add_hashes_to_infotext: boolean | null;
            /**
             * Sd Hypernetwork
             * @description Add hypernetwork to prompt
             * @default None
             */
            sd_hypernetwork: string | null;
            /**
             * Keyedit Precision Attention
             * @description Precision for (attention:1.1) when editing the prompt with Ctrl+up/down
             * @default 0.1
             */
            keyedit_precision_attention: number | null;
            /**
             * Keyedit Precision Extra
             * @description Precision for <extra networks:0.9> when editing the prompt with Ctrl+up/down
             * @default 0.05
             */
            keyedit_precision_extra: number | null;
            /**
             * Keyedit Delimiters
             * @description Word delimiters when editing the prompt with Ctrl+up/down
             * @default .,\/!?%^*;:{}=`~()
             */
            keyedit_delimiters: string | null;
            /**
             * Keyedit Delimiters Whitespace
             * @description Ctrl+up/down whitespace delimiters
             * @default [
             *       "Tab",
             *       "Carriage Return",
             *       "Line Feed"
             *     ]
             */
            keyedit_delimiters_whitespace: unknown[] | null;
            /**
             * Keyedit Move
             * @description Alt+left/right moves prompt elements
             * @default true
             */
            keyedit_move: boolean | null;
            /**
             * Disable Token Counters
             * @description Disable prompt token counters
             * @default false
             */
            disable_token_counters: unknown | null;
            /**
             * Include Styles Into Token Counters
             * @description Count tokens of enabled styles
             * @default true
             */
            include_styles_into_token_counters: boolean | null;
            /**
             * Return Grid
             * @description Show grid in gallery
             * @default true
             */
            return_grid: boolean | null;
            /**
             * Do Not Show Images
             * @description Do not show any images in gallery
             * @default false
             */
            do_not_show_images: unknown | null;
            /**
             * Js Modal Lightbox
             * @description Full page image viewer: enable
             * @default true
             */
            js_modal_lightbox: boolean | null;
            /**
             * Js Modal Lightbox Initially Zoomed
             * @description Full page image viewer: show images zoomed in by default
             * @default true
             */
            js_modal_lightbox_initially_zoomed: boolean | null;
            /**
             * Js Modal Lightbox Gamepad
             * @description Full page image viewer: navigate with gamepad
             * @default false
             */
            js_modal_lightbox_gamepad: unknown | null;
            /**
             * Js Modal Lightbox Gamepad Repeat
             * @description Full page image viewer: gamepad repeat period
             * @default 250
             */
            js_modal_lightbox_gamepad_repeat: number | null;
            /**
             * Sd Webui Modal Lightbox Icon Opacity
             * @description Full page image viewer: control icon unfocused opacity
             * @default 1
             */
            sd_webui_modal_lightbox_icon_opacity: number | null;
            /**
             * Sd Webui Modal Lightbox Toolbar Opacity
             * @description Full page image viewer: tool bar opacity
             * @default 0.9
             */
            sd_webui_modal_lightbox_toolbar_opacity: number | null;
            /**
             * Gallery Height
             * @description Gallery height
             * @default
             */
            gallery_height: unknown | null;
            /**
             * Open Dir Button Choice
             * @description What directory the [📂] button opens
             * @default Subdirectory
             */
            open_dir_button_choice: string | null;
            /**
             * Hires Button Gallery Insert
             * @description Insert [✨] hires button results into gallery
             * @default false
             */
            hires_button_gallery_insert: unknown | null;
            /**
             * Compact Prompt Box
             * @description Compact prompt layout
             * @default false
             */
            compact_prompt_box: unknown | null;
            /**
             * Samplers In Dropdown
             * @description Use dropdown for sampler selection instead of radio group
             * @default true
             */
            samplers_in_dropdown: boolean | null;
            /**
             * Dimensions And Batch Together
             * @description Show Width/Height and Batch sliders in same row
             * @default true
             */
            dimensions_and_batch_together: boolean | null;
            /**
             * Sd Checkpoint Dropdown Use Short
             * @description Checkpoint dropdown: use filenames without paths
             * @default false
             */
            sd_checkpoint_dropdown_use_short: unknown | null;
            /**
             * Hires Fix Show Sampler
             * @description Hires fix: show hires checkpoint and sampler selection
             * @default false
             */
            hires_fix_show_sampler: unknown | null;
            /**
             * Hires Fix Show Prompts
             * @description Hires fix: show hires prompt and negative prompt
             * @default false
             */
            hires_fix_show_prompts: unknown | null;
            /**
             * Txt2Img Settings Accordion
             * @description Settings in txt2img hidden under Accordion
             * @default false
             */
            txt2img_settings_accordion: unknown | null;
            /**
             * Img2Img Settings Accordion
             * @description Settings in img2img hidden under Accordion
             * @default false
             */
            img2img_settings_accordion: unknown | null;
            /**
             * Interrupt After Current
             * @description Don't Interrupt in the middle
             * @default true
             */
            interrupt_after_current: boolean | null;
            /**
             * Localization
             * @description Localization
             * @default None
             */
            localization: string | null;
            /**
             * Quick Setting List
             * @description Quicksettings list
             * @default []
             */
            quick_setting_list: unknown | null;
            /**
             * Ui Tab Order
             * @description UI tab order
             * @default []
             */
            ui_tab_order: unknown | null;
            /**
             * Hidden Tabs
             * @description Hidden UI tabs
             * @default []
             */
            hidden_tabs: unknown | null;
            /**
             * Tabs Without Quick Settings Bar
             * @description UI tabs without Quicksettings bar (top row)
             * @default [
             *       "Spaces"
             *     ]
             */
            tabs_without_quick_settings_bar: unknown[] | null;
            /**
             * Ui Reorder List
             * @description UI item order for txt2img/img2img tabs
             * @default []
             */
            ui_reorder_list: unknown | null;
            /**
             * Gradio Theme
             * @description Gradio theme
             * @default Default
             */
            gradio_theme: string | null;
            /**
             * Gradio Themes Cache
             * @description Cache gradio themes locally
             * @default true
             */
            gradio_themes_cache: boolean | null;
            /**
             * Show Progress In Title
             * @description Show generation progress in window title.
             * @default true
             */
            show_progress_in_title: boolean | null;
            /**
             * Send Seed
             * @description Send seed when sending prompt or image to other interface
             * @default true
             */
            send_seed: boolean | null;
            /**
             * Send Size
             * @description Send size when sending prompt or image to another interface
             * @default true
             */
            send_size: boolean | null;
            /**
             * Enable Reloading Ui Scripts
             * @description Reload UI scripts when using Reload UI option
             * @default false
             */
            enable_reloading_ui_scripts: unknown | null;
            /**
             * Infotext Explanation
             * @default Infotext is what this software calls the text that contains generation parameters and can be used to generate the same picture again.
             *     It is displayed in UI below the image. To use infotext, paste it into the prompt and click the ↙️ paste button.
             */
            infotext_explanation: string | null;
            /**
             * Enable Pnginfo
             * @description Write infotext to metadata of the generated image
             * @default true
             */
            enable_pnginfo: boolean | null;
            /**
             * Stealth Pnginfo Option
             * @description Stealth infotext mode
             * @default Alpha
             */
            stealth_pnginfo_option: string | null;
            /**
             * Save Txt
             * @description Create a text file with infotext next to every generated image
             * @default false
             */
            save_txt: unknown | null;
            /**
             * Add Model Name To Info
             * @description Add model name to infotext
             * @default true
             */
            add_model_name_to_info: boolean | null;
            /**
             * Add Model Hash To Info
             * @description Add model hash to infotext
             * @default true
             */
            add_model_hash_to_info: boolean | null;
            /**
             * Add Vae Name To Info
             * @description Add VAE name to infotext
             * @default true
             */
            add_vae_name_to_info: boolean | null;
            /**
             * Add Vae Hash To Info
             * @description Add VAE hash to infotext
             * @default true
             */
            add_vae_hash_to_info: boolean | null;
            /**
             * Add User Name To Info
             * @description Add user name to infotext when authenticated
             * @default false
             */
            add_user_name_to_info: unknown | null;
            /**
             * Add Version To Infotext
             * @description Add program version to infotext
             * @default true
             */
            add_version_to_infotext: boolean | null;
            /**
             * Disable Weights Auto Swap
             * @description Disregard checkpoint information from pasted infotext
             * @default true
             */
            disable_weights_auto_swap: boolean | null;
            /**
             * Infotext Skip Pasting
             * @description Disregard fields from pasted infotext
             * @default []
             */
            infotext_skip_pasting: unknown | null;
            /**
             * Infotext Styles
             * @description Infer styles from prompts of pasted infotext
             * @default Apply if any
             */
            infotext_styles: string | null;
            /**
             * Show Progressbar
             * @description Show progressbar
             * @default true
             */
            show_progressbar: boolean | null;
            /**
             * Live Previews Enable
             * @description Show live previews of the created image
             * @default true
             */
            live_previews_enable: boolean | null;
            /**
             * Live Previews Image Format
             * @description Live preview file format
             * @default png
             */
            live_previews_image_format: string | null;
            /**
             * Show Progress Grid
             * @description Show previews of all images generated in a batch as a grid
             * @default true
             */
            show_progress_grid: boolean | null;
            /**
             * Show Progress Every N Steps
             * @description Live preview display period
             * @default 10
             */
            show_progress_every_n_steps: number | null;
            /**
             * Show Progress Type
             * @description Live preview method
             * @default Approx NN
             */
            show_progress_type: string | null;
            /**
             * Live Preview Allow Lowvram Full
             * @description Allow Full live preview method with lowvram/medvram
             * @default false
             */
            live_preview_allow_lowvram_full: unknown | null;
            /**
             * Live Preview Content
             * @description Live preview subject
             * @default Prompt
             */
            live_preview_content: string | null;
            /**
             * Live Preview Refresh Period
             * @description Progressbar and preview update period
             * @default 1000
             */
            live_preview_refresh_period: number | null;
            /**
             * Live Preview Fast Interrupt
             * @description Return image with chosen live preview method on interrupt
             * @default false
             */
            live_preview_fast_interrupt: unknown | null;
            /**
             * Js Live Preview In Modal Lightbox
             * @description Show Live preview in full page image viewer
             * @default false
             */
            js_live_preview_in_modal_lightbox: unknown | null;
            /**
             * Prevent Screen Sleep During Generation
             * @description Prevent screen sleep during generation
             * @default true
             */
            prevent_screen_sleep_during_generation: boolean | null;
            /**
             * Hide Samplers
             * @description Hide samplers in user interface
             * @default []
             */
            hide_samplers: unknown | null;
            /**
             * Eta Ddim
             * @description Eta for DDIM
             * @default 0
             */
            eta_ddim: unknown | null;
            /**
             * Eta Ancestral
             * @description Eta for k-diffusion samplers
             * @default 1
             */
            eta_ancestral: number | null;
            /**
             * Ddim Discretize
             * @description img2img DDIM discretize
             * @default uniform
             */
            ddim_discretize: string | null;
            /**
             * S Churn
             * @description sigma churn
             * @default 0
             */
            s_churn: unknown | null;
            /**
             * S Tmin
             * @description sigma tmin
             * @default 0
             */
            s_tmin: unknown | null;
            /**
             * S Tmax
             * @description sigma tmax
             * @default 0
             */
            s_tmax: unknown | null;
            /**
             * S Noise
             * @description sigma noise
             * @default 1
             */
            s_noise: number | null;
            /**
             * Sigma Min
             * @description sigma min
             * @default 0
             */
            sigma_min: unknown | null;
            /**
             * Sigma Max
             * @description sigma max
             * @default 0
             */
            sigma_max: unknown | null;
            /**
             * Rho
             * @description rho
             * @default 0
             */
            rho: unknown | null;
            /**
             * Eta Noise Seed Delta
             * @description Eta noise seed delta
             * @default 0
             */
            eta_noise_seed_delta: unknown | null;
            /**
             * Always Discard Next To Last Sigma
             * @description Always discard next-to-last sigma
             * @default false
             */
            always_discard_next_to_last_sigma: unknown | null;
            /**
             * Sgm Noise Multiplier
             * @description SGM noise multiplier
             * @default false
             */
            sgm_noise_multiplier: unknown | null;
            /**
             * Uni Pc Variant
             * @description UniPC variant
             * @default bh1
             */
            uni_pc_variant: string | null;
            /**
             * Uni Pc Skip Type
             * @description UniPC skip type
             * @default time_uniform
             */
            uni_pc_skip_type: string | null;
            /**
             * Uni Pc Order
             * @description UniPC order
             * @default 3
             */
            uni_pc_order: number | null;
            /**
             * Uni Pc Lower Order Final
             * @description UniPC lower order final
             * @default true
             */
            uni_pc_lower_order_final: boolean | null;
            /**
             * Sd Noise Schedule
             * @description Noise schedule for sampling
             * @default Default
             */
            sd_noise_schedule: string | null;
            /**
             * Skip Early Cond
             * @description Ignore negative prompt during early sampling
             * @default 0
             */
            skip_early_cond: unknown | null;
            /**
             * Beta Dist Alpha
             * @description Beta scheduler - alpha
             * @default 0.6
             */
            beta_dist_alpha: number | null;
            /**
             * Beta Dist Beta
             * @description Beta scheduler - beta
             * @default 0.6
             */
            beta_dist_beta: number | null;
            /**
             * Postprocessing Enable In Main Ui
             * @description Enable postprocessing operations in txt2img and img2img tabs
             * @default []
             */
            postprocessing_enable_in_main_ui: unknown | null;
            /**
             * Postprocessing Disable In Extras
             * @description Disable postprocessing operations in extras tab
             * @default []
             */
            postprocessing_disable_in_extras: unknown | null;
            /**
             * Postprocessing Operation Order
             * @description Postprocessing operation order
             * @default []
             */
            postprocessing_operation_order: unknown | null;
            /**
             * Upscaling Max Images In Cache
             * @description Maximum number of images in upscaling cache
             * @default 5
             */
            upscaling_max_images_in_cache: number | null;
            /**
             * Postprocessing Existing Caption Action
             * @description Action for existing captions
             * @default Ignore
             */
            postprocessing_existing_caption_action: string | null;
            /**
             * Disabled Extensions
             * @description Disable these extensions
             * @default []
             */
            disabled_extensions: unknown | null;
            /**
             * Disable All Extensions
             * @description Disable all extensions (preserves the list of disabled extensions)
             * @default none
             */
            disable_all_extensions: string | null;
            /**
             * Restore Config State File
             * @description Config state file to restore from, under 'config-states/' folder
             * @default
             */
            restore_config_state_file: unknown | null;
            /**
             * Sd Checkpoint Hash
             * @description SHA256 hash of the current checkpoint
             * @default
             */
            sd_checkpoint_hash: unknown | null;
            /**
             * Forge Unet Storage Dtype
             * @default Automatic
             */
            forge_unet_storage_dtype: string | null;
            /**
             * Forge Inference Memory
             * @default 1024
             */
            forge_inference_memory: number | null;
            /**
             * Forge Async Loading
             * @default Queue
             */
            forge_async_loading: string | null;
            /**
             * Forge Pin Shared Memory
             * @default CPU
             */
            forge_pin_shared_memory: string | null;
            /**
             * Forge Preset
             * @default sd
             */
            forge_preset: string | null;
            /**
             * Forge Additional Modules
             * @default []
             */
            forge_additional_modules: unknown | null;
            /**
             * Forge Canvas Plain
             * @description ForgeCanvas: use plain background
             * @default false
             */
            forge_canvas_plain: unknown | null;
            /**
             * Forge Canvas Toolbar Always
             * @description ForgeCanvas: toolbar always visible
             * @default false
             */
            forge_canvas_toolbar_always: unknown | null;
            /**
             * Enable Prompt Comments
             * @description Enable comments
             * @default true
             */
            enable_prompt_comments: boolean | null;
            /**
             * Sd T2I Width
             * @description txt2img width
             * @default 512
             */
            sd_t2i_width: number | null;
            /**
             * Sd T2I Height
             * @description txt2img height
             * @default 640
             */
            sd_t2i_height: number | null;
            /**
             * Sd T2I Cfg
             * @description txt2img CFG
             * @default 7
             */
            sd_t2i_cfg: number | null;
            /**
             * Sd T2I Hr Cfg
             * @description txt2img HiRes CFG
             * @default 7
             */
            sd_t2i_hr_cfg: number | null;
            /**
             * Sd I2I Width
             * @description img2img width
             * @default 512
             */
            sd_i2i_width: number | null;
            /**
             * Sd I2I Height
             * @description img2img height
             * @default 512
             */
            sd_i2i_height: number | null;
            /**
             * Sd I2I Cfg
             * @description img2img CFG
             * @default 7
             */
            sd_i2i_cfg: number | null;
            /**
             * Xl T2I Width
             * @description txt2img width
             * @default 896
             */
            xl_t2i_width: number | null;
            /**
             * Xl T2I Height
             * @description txt2img height
             * @default 1152
             */
            xl_t2i_height: number | null;
            /**
             * Xl T2I Cfg
             * @description txt2img CFG
             * @default 5
             */
            xl_t2i_cfg: number | null;
            /**
             * Xl T2I Hr Cfg
             * @description txt2img HiRes CFG
             * @default 5
             */
            xl_t2i_hr_cfg: number | null;
            /**
             * Xl I2I Width
             * @description img2img width
             * @default 1024
             */
            xl_i2i_width: number | null;
            /**
             * Xl I2I Height
             * @description img2img height
             * @default 1024
             */
            xl_i2i_height: number | null;
            /**
             * Xl I2I Cfg
             * @description img2img CFG
             * @default 5
             */
            xl_i2i_cfg: number | null;
            /**
             * Xl Gpu Mb
             * @description GPU Weights (MB)
             * @default 23090
             */
            xl_GPU_MB: number | null;
            /**
             * Flux T2I Width
             * @description txt2img width
             * @default 896
             */
            flux_t2i_width: number | null;
            /**
             * Flux T2I Height
             * @description txt2img height
             * @default 1152
             */
            flux_t2i_height: number | null;
            /**
             * Flux T2I Cfg
             * @description txt2img CFG
             * @default 1
             */
            flux_t2i_cfg: number | null;
            /**
             * Flux T2I Hr Cfg
             * @description txt2img HiRes CFG
             * @default 1
             */
            flux_t2i_hr_cfg: number | null;
            /**
             * Flux T2I D Cfg
             * @description txt2img Distilled CFG
             * @default 3.5
             */
            flux_t2i_d_cfg: number | null;
            /**
             * Flux T2I Hr D Cfg
             * @description txt2img Distilled HiRes CFG
             * @default 3.5
             */
            flux_t2i_hr_d_cfg: number | null;
            /**
             * Flux I2I Width
             * @description img2img width
             * @default 1024
             */
            flux_i2i_width: number | null;
            /**
             * Flux I2I Height
             * @description img2img height
             * @default 1024
             */
            flux_i2i_height: number | null;
            /**
             * Flux I2I Cfg
             * @description img2img CFG
             * @default 1
             */
            flux_i2i_cfg: number | null;
            /**
             * Flux I2I D Cfg
             * @description img2img Distilled CFG
             * @default 3.5
             */
            flux_i2i_d_cfg: number | null;
            /**
             * Flux Gpu Mb
             * @description GPU Weights (MB)
             * @default 23090
             */
            flux_GPU_MB: number | null;
            /**
             * Settings In Ui
             * @default This page allows you to add some settings to the main interface of txt2img and img2img tabs.
             */
            settings_in_ui: string | null;
            /**
             * Extra Options Txt2Img
             * @description Settings for txt2img
             * @default []
             */
            extra_options_txt2img: unknown | null;
            /**
             * Extra Options Img2Img
             * @description Settings for img2img
             * @default []
             */
            extra_options_img2img: unknown | null;
            /**
             * Extra Options Cols
             * @description Number of columns for added settings
             * @default 1
             */
            extra_options_cols: number | null;
            /**
             * Extra Options Accordion
             * @description Place added settings into an accordion
             * @default false
             */
            extra_options_accordion: unknown | null;
        };
        /** PNGInfoRequest */
        PNGInfoRequest: {
            /**
             * Image
             * @description The base64 encoded PNG image
             */
            image: string;
        };
        /** PNGInfoResponse */
        PNGInfoResponse: {
            /**
             * Image info
             * @description A string with the parameters used to generate the image
             */
            info: string;
            /**
             * Items
             * @description A dictionary containing all the other fields the image had
             */
            items: Record<string, never>;
            /**
             * Parameters
             * @description A dictionary with parsed generation info fields
             */
            parameters: Record<string, never>;
        };
        /** PackReq */
        PackReq: {
            /** Paths */
            paths: string[];
            /** Compress */
            compress: boolean;
            /** Pack Only */
            pack_only: boolean;
        };
        /** PathsReq */
        PathsReq: {
            /** Paths */
            paths: string[];
        };
        /** PredictBody */
        PredictBody: {
            session_hash?: string;
            event_id?: string;
            data: Record<string, never>[];
            event_data?: Record<string, never>;
            fn_index?: number;
            trigger_id?: number;
            simple_format?: boolean;
            batched?: boolean;
            request?: Record<string, never>;
        };
        /** ProgressRequest */
        ProgressRequest: {
            /**
             * Task ID
             * @description id of the task to get progress for
             */
            id_task?: string;
            /**
             * Live preview image ID
             * @description id of last received last preview image
             * @default -1
             */
            id_live_preview: number;
            /**
             * Include live preview
             * @description boolean flag indicating whether to include the live preview image
             * @default true
             */
            live_preview: boolean;
        };
        /** PromptStyleItem */
        PromptStyleItem: {
            /** Name */
            name: string;
            /** Prompt */
            prompt: string | null;
            /** Negative Prompt */
            negative_prompt: string | null;
        };
        /** QuicksettingsHint */
        QuicksettingsHint: {
            /** Name of the quicksettings field */
            name: string;
            /** Label of the quicksettings field */
            label: string;
        };
        /** RealesrganItem */
        RealesrganItem: {
            /** Name */
            name: string;
            /** Path */
            path: string | null;
            /** Scale */
            scale: number | null;
        };
        /** RemoveCustomTagFromReq */
        RemoveCustomTagFromReq: {
            /** Img Id */
            img_id: number;
            /** Tag Id */
            tag_id: string;
        };
        /** RemoveCustomTagReq */
        RemoveCustomTagReq: {
            /** Tag Id */
            tag_id: number;
        };
        /** RenameFileReq */
        RenameFileReq: {
            /** Path */
            path: string;
            /** Name */
            name: string;
        };
        /** ResetBody */
        ResetBody: {
            /** Event Id */
            event_id: string;
        };
        /** SDModelItem */
        SDModelItem: {
            /** Title */
            title: string;
            /** Model Name */
            model_name: string;
            /** Short hash */
            hash: string | null;
            /** sha256 hash */
            sha256: string | null;
            /** Filename */
            filename: string;
            /** Config file */
            config?: string | null;
        };
        /** SDModuleItem */
        SDModuleItem: {
            /** Model Name */
            model_name: string;
            /** Filename */
            filename: string;
        };
        /** SamplerItem */
        SamplerItem: {
            /** Name */
            name: string;
            /** Aliases */
            aliases: string[];
            /** Options */
            options: Record<string, never>;
        };
        /** SchedulerItem */
        SchedulerItem: {
            /** Name */
            name: string;
            /** Label */
            label: string;
            /** Aliases */
            aliases: string[] | null;
            /** Default Rho */
            default_rho: number | null;
            /** Needs Inner Model */
            need_inner_model: boolean | null;
        };
        /** ScriptArg */
        ScriptArg: {
            /**
             * Label
             * @description Name of the argument in UI
             */
            label?: string | null;
            /**
             * Value
             * @description Default value of the argument
             */
            value?: unknown | null;
            /**
             * Minimum
             * @description Minimum allowed value for the argumentin UI
             */
            minimum?: unknown | null;
            /**
             * Minimum
             * @description Maximum allowed value for the argumentin UI
             */
            maximum?: unknown | null;
            /**
             * Minimum
             * @description Step for changing value of the argumentin UI
             */
            step?: unknown | null;
            /**
             * Choices
             * @description Possible values for the argument
             */
            choices?: string[] | null;
        };
        /** ScriptInfo */
        ScriptInfo: {
            /**
             * Name
             * @description Script name
             */
            name?: string | null;
            /**
             * IsAlwayson
             * @description Flag specifying whether this script is an alwayson script
             */
            is_alwayson?: boolean | null;
            /**
             * IsImg2img
             * @description Flag specifying whether this script is an img2img script
             */
            is_img2img?: boolean | null;
            /**
             * Arguments
             * @description List of script's arguments
             */
            args: components["schemas"]["ScriptArg"][];
        };
        /** ScriptsList */
        ScriptsList: {
            /**
             * Txt2img
             * @description Titles of scripts (txt2img)
             */
            txt2img?: unknown[] | null;
            /**
             * Img2img
             * @description Titles of scripts (img2img)
             */
            img2img?: unknown[] | null;
        };
        /** SearchBySubstrReq */
        SearchBySubstrReq: {
            /** Surstr */
            surstr: string;
            /** Cursor */
            cursor: string;
            /** Regexp */
            regexp: string;
            /** Folder Paths */
            folder_paths?: string[];
            /**
             * Size
             * @default 200
             */
            size: number | null;
            /**
             * Path Only
             * @default false
             */
            path_only: boolean | null;
        };
        /** SetTargetFrameAsCoverReq */
        SetTargetFrameAsCoverReq: {
            /** Base64 Img */
            base64_img: string;
            /** Path */
            path: string;
            /** Updated Time */
            updated_time: string;
        };
        /** SimplePredictBody */
        SimplePredictBody: {
            /** Data */
            data: unknown[];
            /** Session Hash */
            session_hash?: string | null;
        };
        /** StableDiffusionProcessingImg2Img */
        StableDiffusionProcessingImg2Img: {
            /**
             * Prompt
             * @default
             */
            prompt: string | null;
            /**
             * Negative Prompt
             * @default
             */
            negative_prompt: string | null;
            /** Styles */
            styles?: string[] | null;
            /**
             * Seed
             * @default -1
             */
            seed: number | null;
            /**
             * Subseed
             * @default -1
             */
            subseed: number | null;
            /**
             * Subseed Strength
             * @default 0
             */
            subseed_strength: number | null;
            /**
             * Seed Resize From H
             * @default -1
             */
            seed_resize_from_h: number | null;
            /**
             * Seed Resize From W
             * @default -1
             */
            seed_resize_from_w: number | null;
            /** Sampler Name */
            sampler_name?: string | null;
            /** Scheduler */
            scheduler?: string | null;
            /**
             * Batch Size
             * @default 1
             */
            batch_size: number | null;
            /**
             * N Iter
             * @default 1
             */
            n_iter: number | null;
            /**
             * Steps
             * @default 50
             */
            steps: number | null;
            /**
             * Cfg Scale
             * @default 7
             */
            cfg_scale: number | null;
            /**
             * Distilled Cfg Scale
             * @default 3.5
             */
            distilled_cfg_scale: number | null;
            /**
             * Width
             * @default 512
             */
            width: number | null;
            /**
             * Height
             * @default 512
             */
            height: number | null;
            /** Restore Faces */
            restore_faces?: boolean | null;
            /** Tiling */
            tiling?: boolean | null;
            /**
             * Do Not Save Samples
             * @default false
             */
            do_not_save_samples: boolean | null;
            /**
             * Do Not Save Grid
             * @default false
             */
            do_not_save_grid: boolean | null;
            /** Eta */
            eta?: number | null;
            /**
             * Denoising Strength
             * @default 0.75
             */
            denoising_strength: number;
            /** S Min Uncond */
            s_min_uncond?: number | null;
            /** S Churn */
            s_churn?: number | null;
            /** S Tmax */
            s_tmax?: number | null;
            /** S Tmin */
            s_tmin?: number | null;
            /** S Noise */
            s_noise?: number | null;
            /** Override Settings */
            override_settings?: Record<string, never> | null;
            /**
             * Override Settings Restore Afterwards
             * @default true
             */
            override_settings_restore_afterwards: boolean | null;
            /** Refiner Checkpoint */
            refiner_checkpoint?: string | null;
            /** Refiner Switch At */
            refiner_switch_at?: number | null;
            /**
             * Disable Extra Networks
             * @default false
             */
            disable_extra_networks: boolean | null;
            /** Firstpass Image */
            firstpass_image?: string | null;
            /** Comments */
            comments?: Record<string, never> | null;
            /** Init Images */
            init_images?: unknown[] | null;
            /**
             * Resize Mode
             * @default 0
             */
            resize_mode: number | null;
            /** Image Cfg Scale */
            image_cfg_scale?: number | null;
            /** Mask */
            mask?: string | null;
            /**
             * Mask Blur X
             * @default 4
             */
            mask_blur_x: number | null;
            /**
             * Mask Blur Y
             * @default 4
             */
            mask_blur_y: number | null;
            /** Mask Blur */
            mask_blur?: number | null;
            /**
             * Mask Round
             * @default true
             */
            mask_round: boolean | null;
            /**
             * Inpainting Fill
             * @default 0
             */
            inpainting_fill: number | null;
            /**
             * Inpaint Full Res
             * @default true
             */
            inpaint_full_res: boolean | null;
            /**
             * Inpaint Full Res Padding
             * @default 0
             */
            inpaint_full_res_padding: number | null;
            /**
             * Inpainting Mask Invert
             * @default 0
             */
            inpainting_mask_invert: number | null;
            /** Initial Noise Multiplier */
            initial_noise_multiplier?: number | null;
            /** Latent Mask */
            latent_mask?: string | null;
            /** Force Task Id */
            force_task_id?: string | null;
            /**
             * Hr Distilled Cfg
             * @default 3.5
             */
            hr_distilled_cfg: number | null;
            /**
             * Sampler Index
             * @default Euler
             */
            sampler_index: string;
            /**
             * Include Init Images
             * @default false
             */
            include_init_images: boolean;
            /** Script Name */
            script_name?: string | null;
            /**
             * Script Args
             * @default []
             */
            script_args: unknown[];
            /**
             * Send Images
             * @default true
             */
            send_images: boolean;
            /**
             * Save Images
             * @default false
             */
            save_images: boolean;
            /**
             * Alwayson Scripts
             * @default {}
             */
            alwayson_scripts: Record<string, never>;
            /** Infotext */
            infotext?: string | null;
        };
        /** StableDiffusionProcessingTxt2Img */
        StableDiffusionProcessingTxt2Img: {
            /**
             * Prompt
             * @default
             */
            prompt: string | null;
            /**
             * Negative Prompt
             * @default
             */
            negative_prompt: string | null;
            /** Styles */
            styles?: string[] | null;
            /**
             * Seed
             * @default -1
             */
            seed: number | null;
            /**
             * Subseed
             * @default -1
             */
            subseed: number | null;
            /**
             * Subseed Strength
             * @default 0
             */
            subseed_strength: number | null;
            /**
             * Seed Resize From H
             * @default -1
             */
            seed_resize_from_h: number | null;
            /**
             * Seed Resize From W
             * @default -1
             */
            seed_resize_from_w: number | null;
            /** Sampler Name */
            sampler_name?: string | null;
            /** Scheduler */
            scheduler?: string | null;
            /**
             * Batch Size
             * @default 1
             */
            batch_size: number | null;
            /**
             * N Iter
             * @default 1
             */
            n_iter: number | null;
            /**
             * Steps
             * @default 50
             */
            steps: number | null;
            /**
             * Cfg Scale
             * @default 7
             */
            cfg_scale: number | null;
            /**
             * Distilled Cfg Scale
             * @default 3.5
             */
            distilled_cfg_scale: number | null;
            /**
             * Width
             * @default 512
             */
            width: number | null;
            /**
             * Height
             * @default 512
             */
            height: number | null;
            /** Restore Faces */
            restore_faces?: boolean | null;
            /** Tiling */
            tiling?: boolean | null;
            /**
             * Do Not Save Samples
             * @default false
             */
            do_not_save_samples: boolean | null;
            /**
             * Do Not Save Grid
             * @default false
             */
            do_not_save_grid: boolean | null;
            /** Eta */
            eta?: number | null;
            /** Denoising Strength */
            denoising_strength?: number | null;
            /** S Min Uncond */
            s_min_uncond?: number | null;
            /** S Churn */
            s_churn?: number | null;
            /** S Tmax */
            s_tmax?: number | null;
            /** S Tmin */
            s_tmin?: number | null;
            /** S Noise */
            s_noise?: number | null;
            /** Override Settings */
            override_settings?: Record<string, never> | null;
            /**
             * Override Settings Restore Afterwards
             * @default true
             */
            override_settings_restore_afterwards: boolean | null;
            /** Refiner Checkpoint */
            refiner_checkpoint?: string | null;
            /** Refiner Switch At */
            refiner_switch_at?: number | null;
            /**
             * Disable Extra Networks
             * @default false
             */
            disable_extra_networks: boolean | null;
            /** Firstpass Image */
            firstpass_image?: string | null;
            /** Comments */
            comments?: Record<string, never> | null;
            /**
             * Enable Hr
             * @default false
             */
            enable_hr: boolean | null;
            /**
             * Firstphase Width
             * @default 0
             */
            firstphase_width: number | null;
            /**
             * Firstphase Height
             * @default 0
             */
            firstphase_height: number | null;
            /**
             * Hr Scale
             * @default 2
             */
            hr_scale: number | null;
            /** Hr Upscaler */
            hr_upscaler?: string | null;
            /**
             * Hr Second Pass Steps
             * @default 0
             */
            hr_second_pass_steps: number | null;
            /**
             * Hr Resize X
             * @default 0
             */
            hr_resize_x: number | null;
            /**
             * Hr Resize Y
             * @default 0
             */
            hr_resize_y: number | null;
            /** Hr Checkpoint Name */
            hr_checkpoint_name?: string | null;
            /** Hr Additional Modules */
            hr_additional_modules?: unknown[] | null;
            /** Hr Sampler Name */
            hr_sampler_name?: string | null;
            /** Hr Scheduler */
            hr_scheduler?: string | null;
            /**
             * Hr Prompt
             * @default
             */
            hr_prompt: string | null;
            /**
             * Hr Negative Prompt
             * @default
             */
            hr_negative_prompt: string | null;
            /**
             * Hr Cfg
             * @default 1
             */
            hr_cfg: number | null;
            /**
             * Hr Distilled Cfg
             * @default 3.5
             */
            hr_distilled_cfg: number | null;
            /** Force Task Id */
            force_task_id?: string | null;
            /**
             * Sampler Index
             * @default Euler
             */
            sampler_index: string;
            /** Script Name */
            script_name?: string | null;
            /**
             * Script Args
             * @default []
             */
            script_args: unknown[];
            /**
             * Send Images
             * @default true
             */
            send_images: boolean;
            /**
             * Save Images
             * @default false
             */
            save_images: boolean;
            /**
             * Alwayson Scripts
             * @default {}
             */
            alwayson_scripts: Record<string, never>;
            /** Infotext */
            infotext?: string | null;
        };
        /** TextToImageResponse */
        TextToImageResponse: {
            /**
             * Image
             * @description The generated image in base64 format.
             */
            images?: string[] | null;
            /** Parameters */
            parameters: Record<string, never>;
            /** Info */
            info: string;
        };
        /** ToggleCustomTagToImgReq */
        ToggleCustomTagToImgReq: {
            /** Img Path */
            img_path: string;
            /** Tag Id */
            tag_id: number;
        };
        /** UpdateTagReq */
        UpdateTagReq: {
            /** Id */
            id: number;
            /** Color */
            color: string;
        };
        /** UpscalerItem */
        UpscalerItem: {
            /** Name */
            name: string;
            /** Model Name */
            model_name: string | null;
            /** Path */
            model_path: string | null;
            /** URL */
            model_url: string | null;
            /** Scale */
            scale: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** ProgressResponse */
        modules__api__models__ProgressResponse: {
            /**
             * Progress
             * @description The progress with a range of 0 to 1
             */
            progress: number;
            /** ETA in secs */
            eta_relative: number;
            /**
             * State
             * @description The current state snapshot
             */
            state: Record<string, never>;
            /**
             * Current image
             * @description The current image in base64 format. opts.show_progress_every_n_steps is required for this to work.
             */
            current_image?: string | null;
            /**
             * Info text
             * @description Info text used by WebUI.
             */
            textinfo?: string | null;
        };
        /** ProgressResponse */
        modules__progress__ProgressResponse: {
            /** Whether the task is being worked on right now */
            active: boolean;
            /** Whether the task is in queue */
            queued: boolean;
            /** Whether the task has already finished */
            completed: boolean;
            /**
             * Progress
             * @description The progress with a range of 0 to 1
             */
            progress?: number | null;
            /** ETA in secs */
            eta?: number | null;
            /**
             * Live preview image
             * @description Current live preview; a data: uri
             */
            live_preview?: string | null;
            /**
             * Live preview image ID
             * @description Send this together with next request to prevent receiving same image
             */
            id_live_preview?: number | null;
            /**
             * Info text
             * @description Info text used by WebUI.
             */
            textinfo?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_current_user_user__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | null;
                };
            };
        };
    };
    get_current_user_user_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | null;
                };
            };
        };
    };
    login_check_login_check__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    login_check_login_check_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_token_token__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_token_token_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    app_id_app_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    app_id_app_id_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    notify_changes_dev_reload_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    login_login__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_login__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_logout_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    main__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    main__head: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    api_info_info_get: {
        parameters: {
            query?: {
                all_endpoints?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_info_info__get: {
        parameters: {
            query?: {
                all_endpoints?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_config_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_config_config__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    static_resource_static__path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    custom_component_path_custom_component__id___type___file_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                type: string;
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    build_resource_assets__path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    favicon_favicon_ico_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    reverse_proxy_proxy__url_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                url_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reverse_proxy_proxy__url_path__head: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                url_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    file_file__path_or_url__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path_or_url: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    file_file__path_or_url__head: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path_or_url: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_stream__session_hash___run___component_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_hash: string;
                run: number;
                component_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    file_deprecated_file__path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_iterator_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_iterator_reset__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    heartbeat_heartbeat__session_hash__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_api__api_name___post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_api__api_name__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_run__api_name___post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_run__api_name__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    simple_predict_post_call__api_name___post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimplePredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    simple_predict_post_call__api_name__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimplePredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_join_queue_join_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_event_cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    simple_predict_get_call__api_name___event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_data_queue_data_get: {
        parameters: {
            query: {
                session_hash: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    component_server_component_server__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    component_server_component_server_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_queue_status_queue_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstimationMessage"];
                };
            };
        };
    };
    get_upload_progress_upload_progress_get: {
        parameters: {
            query: {
                upload_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_upload_post: {
        parameters: {
            query?: {
                upload_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    startup_events_startup_events_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    theme_css_theme_css_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    robots_txt_robots_txt_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    analytics_login_monitoring_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    analytics_dashboard_monitoring__key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pending_tasks_internal_pending_tasks_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    progressapi_internal_progress_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProgressRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["modules__progress__ProgressResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    quicksettings_hint_internal_quicksettings_hint_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuicksettingsHint"][];
                };
            };
        };
    };
    _lambda__internal_ping_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    _lambda__internal_profile_startup_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    download_sysinfo_internal_sysinfo_get: {
        parameters: {
            query?: {
                attachment?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _lambda__internal_sysinfo_download_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    text2imgapi_sdapi_v1_txt2img_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StableDiffusionProcessingTxt2Img"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextToImageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    img2imgapi_sdapi_v1_img2img_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StableDiffusionProcessingImg2Img"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageToImageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    extras_single_image_api_sdapi_v1_extra_single_image_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtrasSingleImageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtrasSingleImageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    extras_batch_images_api_sdapi_v1_extra_batch_images_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtrasBatchImagesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtrasBatchImagesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pnginfoapi_sdapi_v1_png_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PNGInfoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PNGInfoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    progressapi_sdapi_v1_progress_get: {
        parameters: {
            query?: {
                skip_current_image?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["modules__api__models__ProgressResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    interrogateapi_sdapi_v1_interrogate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InterrogateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    interruptapi_sdapi_v1_interrupt_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    skip_sdapi_v1_skip_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_config_sdapi_v1_options_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Options"];
                };
            };
        };
    };
    set_config_sdapi_v1_options_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_cmd_flags_sdapi_v1_cmd_flags_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flags"];
                };
            };
        };
    };
    get_samplers_sdapi_v1_samplers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SamplerItem"][];
                };
            };
        };
    };
    get_schedulers_sdapi_v1_schedulers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SchedulerItem"][];
                };
            };
        };
    };
    get_upscalers_sdapi_v1_upscalers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpscalerItem"][];
                };
            };
        };
    };
    get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LatentUpscalerModeItem"][];
                };
            };
        };
    };
    get_sd_models_sdapi_v1_sd_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SDModelItem"][];
                };
            };
        };
    };
    get_sd_vaes_and_text_encoders_sdapi_v1_sd_modules_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SDModuleItem"][];
                };
            };
        };
    };
    get_hypernetworks_sdapi_v1_hypernetworks_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HypernetworkItem"][];
                };
            };
        };
    };
    get_face_restorers_sdapi_v1_face_restorers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceRestorerItem"][];
                };
            };
        };
    };
    get_realesrgan_models_sdapi_v1_realesrgan_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RealesrganItem"][];
                };
            };
        };
    };
    get_prompt_styles_sdapi_v1_prompt_styles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptStyleItem"][];
                };
            };
        };
    };
    get_embeddings_sdapi_v1_embeddings_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddingsResponse"];
                };
            };
        };
    };
    refresh_embeddings_sdapi_v1_refresh_embeddings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_checkpoints_sdapi_v1_refresh_checkpoints_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_vae_sdapi_v1_refresh_vae_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_embedding_sdapi_v1_create_embedding_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_hypernetwork_sdapi_v1_create_hypernetwork_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_memory_sdapi_v1_memory_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemoryResponse"];
                };
            };
        };
    };
    unloadapi_sdapi_v1_unload_checkpoint_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    reloadapi_sdapi_v1_reload_checkpoint_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_scripts_list_sdapi_v1_scripts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptsList"];
                };
            };
        };
    };
    get_script_info_sdapi_v1_script_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptInfo"][];
                };
            };
        };
    };
    get_extensions_list_sdapi_v1_extensions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtensionItem"][];
                };
            };
        };
    };
    fetch_file_sd_extra_networks_thumb_get: {
        parameters: {
            query?: {
                filename?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fetch_cover_images_sd_extra_networks_cover_images_get: {
        parameters: {
            query?: {
                page?: string;
                item?: string;
                index?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_metadata_sd_extra_networks_metadata_get: {
        parameters: {
            query?: {
                page?: string;
                item?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_single_card_sd_extra_networks_get_single_card_get: {
        parameters: {
            query?: {
                page?: string;
                tabname?: string;
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    model_list_controlnet_model_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    module_list_controlnet_module_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    control_types_controlnet_control_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    detect_controlnet_detect_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_detect_controlnet_detect_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_loras_sdapi_v1_loras_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_loras_sdapi_v1_refresh_loras_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    greeting_infinite_image_browsing_hello_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    global_setting_infinite_image_browsing_global_setting_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    app_fe_setting_infinite_image_browsing_app_fe_setting_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppFeSettingReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_app_fe_setting_infinite_image_browsing_app_fe_setting_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppFeSettingDelReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_version_infinite_image_browsing_version_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    delete_files_infinite_image_browsing_delete_files_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteFilesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_folders_infinite_image_browsing_mkdirs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFoldersReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    copy_files_infinite_image_browsing_copy_files_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveFilesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    move_files_infinite_image_browsing_move_files_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveFilesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_target_folder_files_infinite_image_browsing_files_get: {
        parameters: {
            query: {
                folder_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    batch_get_files_info_infinite_image_browsing_batch_get_files_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    thumbnail_infinite_image_browsing_image_thumbnail_get: {
        parameters: {
            query: {
                path: string;
                t: string;
                size?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_file_infinite_image_browsing_file_get: {
        parameters: {
            query: {
                path: string;
                t: string;
                disposition?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_video_infinite_image_browsing_stream_video_get: {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    video_cover_infinite_image_browsing_video_cover_get: {
        parameters: {
            query: {
                path: string;
                mt: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_target_frame_as_video_cover_infinite_image_browsing_set_target_frame_as_video_cover_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTargetFrameAsCoverReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_set_send_img_path_infinite_image_browsing_send_img_path_post: {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_set_send_img_path_infinite_image_browsing_gen_info_completed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    image_geninfo_infinite_image_browsing_image_geninfo_get: {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    image_geninfo_batch_infinite_image_browsing_image_geninfo_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeninfoBatchReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_path_exists_infinite_image_browsing_check_path_exists_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckPathExistsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    index_bd_infinite_image_browsing_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    serve_static_file_infinite_image_browsing_fe_static__file_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    open_folder_using_explore_infinite_image_browsing_open_folder_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenFolderReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    shutdown_app_infinite_image_browsing_shutdown_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    zip_files_infinite_image_browsing_zip_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PackReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    open_target_file_withDefault_app_infinite_image_browsing_open_with_default_app_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenFolderReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    batch_get_top_4_media_cover_info_infinite_image_browsing_batch_top_4_media_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_db_basic_info_infinite_image_browsing_db_basic_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    random_image_infinite_image_browsing_db_random_images_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_db_expired_infinite_image_browsing_db_expired_dirs_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_image_db_data_infinite_image_browsing_db_update_image_data_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    search_by_substr_infinite_image_browsing_db_search_by_substr_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchBySubstrReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    match_image_by_tags_infinite_image_browsing_db_match_images_by_tags_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MatchImagesByTagsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_img_selected_custom_tag_infinite_image_browsing_db_img_selected_custom_tag_get: {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_img_tags_infinite_image_browsing_db_get_image_tags_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tag_infinite_image_browsing_db_update_tag_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTagReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    toggle_custom_tag_to_img_infinite_image_browsing_db_toggle_custom_tag_to_img_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleCustomTagToImgReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    batch_update_image_tag_infinite_image_browsing_db_batch_update_image_tag_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchUpdateImageReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_custom_tag_infinite_image_browsing_db_add_custom_tag_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCustomTagReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rename_file_infinite_image_browsing_db_rename_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenameFileReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_custom_tag_infinite_image_browsing_db_remove_custom_tag_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveCustomTagReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_custom_tag_from_img_infinite_image_browsing_db_remove_custom_tag_from_img_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveCustomTagFromReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_extra_paths_infinite_image_browsing_db_extra_paths_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_extra_path_infinite_image_browsing_db_extra_paths_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraPathModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_extra_path_infinite_image_browsing_db_extra_paths_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraPathModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    alias_extra_path_infinite_image_browsing_db_alias_extra_path_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraPathAliasModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rebuild_index_infinite_image_browsing_db_rebuild_index_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
