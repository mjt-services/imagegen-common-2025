{"version":3,"file":"Automatic1111Types.js","sourceRoot":"","sources":["../../src/3rd-party/Automatic1111Types.ts"],"names":[],"mappings":"","sourcesContent":["// Base Types\nexport type UUID = string;\nexport type URL = string;\nexport type Base64String = string;\nexport type Timestamp = string; // ISO 8601 format\n\n// Request Types\nexport type TextToImageRequest = {\n  prompt: string;\n  negative_prompt?: string;\n  styles?: string[];\n  seed?: number;\n  subseed?: number;\n  subseed_strength?: number;\n  seed_resize_from_h?: number;\n  seed_resize_from_w?: number;\n  sampler_name?: string;\n  scheduler?: string;\n  batch_size?: number;\n  n_iter?: number;\n  steps?: number;\n  cfg_scale?: number;\n  width?: number;\n  height?: number;\n  restore_faces?: boolean;\n  tiling?: boolean;\n  do_not_save_samples?: boolean;\n  do_not_save_grid?: boolean;\n  eta?: number;\n  denoising_strength?: number;\n  s_min_uncond?: number;\n  s_churn?: number;\n  s_tmax?: number;\n  s_tmin?: number;\n  s_noise?: number;\n  override_settings?: Record<string, any>;\n  override_settings_restore_afterwards?: boolean;\n  refiner_checkpoint?: string;\n  refiner_switch_at?: number;\n  disable_extra_networks?: boolean;\n  firstpass_image?: Base64String;\n  comments?: Record<string, any>;\n  enable_hr?: boolean;\n  firstphase_width?: number;\n  firstphase_height?: number;\n  hr_scale?: number;\n  hr_upscaler?: string;\n  hr_second_pass_steps?: number;\n  hr_resize_x?: number;\n  hr_resize_y?: number;\n  hr_checkpoint_name?: string;\n  hr_sampler_name?: string;\n  hr_scheduler?: string;\n  hr_prompt?: string;\n  hr_negative_prompt?: string;\n  force_task_id?: string;\n  sampler_index?: string;\n  script_name?: string;\n  script_args?: any[];\n  send_images?: boolean;\n  save_images?: boolean;\n  alwayson_scripts?: Record<string, any>;\n  infotext?: string;\n};\n\nexport type ImageToImageRequest = {\n  init_image: Base64String;\n  prompt: string;\n  mask?: Base64String;\n  width?: number;\n  height?: number;\n  steps?: number;\n  sampler?: string;\n  seed?: number;\n};\n\nexport type ExtrasSingleImageRequest = {\n  image: Base64String;\n  resize_mode?: 0 | 1;\n  upscaling_resize?: number;\n  upscaling_resize_w?: number;\n  upscaling_resize_h?: number;\n  upscaling_crop?: boolean;\n  gfpgan_visibility?: number;\n  codeformer_visibility?: number;\n  codeformer_weight?: number;\n  upscaler_1?: string;\n  upscaler_2?: string;\n  extras_upscaler_2_visibility?: number;\n  upscale_first?: boolean;\n};\n\n// Progress Request and Response Types\nexport type ProgressRequest = {};\n\nexport type ProgressResponse = {\n  progress: number;\n  eta_relative: number;\n  state: Record<string, any>;\n  current_image?: Base64String;\n  textinfo?: string;\n};\n\n// Error Response Type\nexport type ErrorDetail = {\n  loc: (string | number)[];\n  msg: string;\n  type: string;\n};\n\nexport type ErrorResponse = {\n  detail: ErrorDetail[];\n};\n\n// Unified Response Type\nexport type ImageResponse = {\n  images: Base64String[];\n  parameters: Record<string, any>;\n  info: string;\n};\n\n// General API Response Wrapper\nexport type APIResponse<T> = {\n  success: boolean;\n  data?: T;\n  error?: string;\n};\n\n/**\n * Metadata for a LoRA model as returned by the API.\n */\nexport interface LoraMetadata {\n  [key: string]: any;\n  // Contains built-in metadata (e.g. training dataset, version).\n  // Does NOT include user_metadata (activation text, preferences), as of July 2024 :contentReference[oaicite:1]{index=1}.\n}\n\n/**\n * Representation of a single LoRA model entry.\n */\nexport interface LoraEntry {\n  /** Filename or identifier, e.g. \"CoolStyle-Lora.safetensors\" */\n  name: string;\n\n  /** Alias used in prompts, e.g. \"coolstyle\" */\n  alias?: string;\n\n  /** Filesystem path to the LoRA model file */\n  path: string;\n\n  /** Arbitrary metadata object with properties describing the model */\n  metadata: LoraMetadata;\n}\n\n/**\n * The full result array returned by GET /sdapi/v1/loras\n */\nexport type GetLorasResponse = LoraEntry[];\n\nexport type GetModulesResponse = {\n  model_name: string;\n  filename: string;\n}[];\n\n/**\n * Represents a single model checkpoint or LoRA model entry.\n */\nexport interface ModelEntry {\n  /** Human-readable title of the model, shown in UI dropdowns */\n  title: string;\n\n  /** Internal model identifier or name used by the backend */\n  model_name: string;\n\n  /** Short hash (typically MD5 or similar) for quick reference */\n  hash: string;\n\n  /** Full SHA-256 checksum of the model file */\n  sha256: string;\n\n  /** Filename of the model, including extension (e.g., .safetensors, .ckpt) */\n  filename: string;\n\n  /** Path to the configuration file or a config identifier (e.g., \"v1-inference.yaml\") */\n  config: string;\n}\n\n/**\n * Response format for APIs returning a list of models.\n */\nexport type ModelListResponse = ModelEntry[];\n"]}